
projects/TP3/adc_dac/out/adc_dac.elf:     file format elf32-littlearm
projects/TP3/adc_dac/out/adc_dac.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0010fd

Program Header:
0x70000001 off    0x000126b8 vaddr 0x1a0026b8 paddr 0x1a0026b8 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010048 vaddr 0x10000048 paddr 0x10000048 align 2**16
         filesz 0x00000000 memsz 0x0000042c flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000026c0 memsz 0x000026c0 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0026c0 align 2**16
         filesz 0x00000048 memsz 0x00000048 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026b8  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  10000000  1a0026c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020048  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
  6 .bss          0000042c  10000048  10000048  00010048  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a0026b8  1a0026b8  000126b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00020048  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00020048  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00020048  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 17 .noinit       00000000  10000474  10000474  00020048  2**2
                  CONTENTS
 18 .debug_info   0001c208  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 000042f1  00000000  00000000  0003c250  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000794e  00000000  00000000  00040541  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 000008d8  00000000  00000000  00047e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 000009e0  00000000  00000000  00048767  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000a996  00000000  00000000  00049147  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   00010901  00000000  00000000  00053add  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    00027724  00000000  00000000  000643de  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000079  00000000  00000000  0008bb02  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000032  00000000  00000000  0008bb7b  2**0
                  CONTENTS, READONLY
 28 .debug_frame  000015f4  00000000  00000000  0008bbb0  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000048 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0026b8 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000474 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a001b78 l     O .text	00000004 InitClkStates
1a001b7c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a0003b0 l     F .text	00000044 Board_LED_Init
1a0003f4 l     F .text	00000040 Board_TEC_Init
1a000434 l     F .text	00000040 Board_GPIO_Init
1a000474 l     F .text	00000030 Board_ADC_Init
1a0004a4 l     F .text	00000038 Board_SPI_Init
1a0004dc l     F .text	00000024 Board_I2C_Init
1a001bf4 l     O .text	00000008 GpioButtons
1a001bfc l     O .text	0000000c GpioLeds
1a001c08 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a00056c l     F .text	000000a0 pll_calc_divs
1a00060c l     F .text	0000010c pll_get_frac
1a000718 l     F .text	00000048 Chip_Clock_FindBaseClock
1a000984 l     F .text	00000022 Chip_Clock_GetDivRate
10000048 l     O .bss	00000008 audio_usb_pll_freq
1a001c28 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a000b24 l     F .text	00000014 Chip_SSP_GetClockIndex
1a000b38 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000bd8 l     F .text	0000002c Chip_UART_GetIndex
1a001c94 l     O .text	00000008 UART_BClock
1a001c9c l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000df8 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000e0c l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a001ca4 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 dac_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0011a4 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
10000050 l     O .bss	00000004 callBackFuncParams
10000058 l     O .bss	00000008 tickCounter
10000060 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_dac.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a001dd4 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000064 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 adc_dac.c
1a0016e4 l     F .text	0000003c uartReadString
10000068 l     O .bss	00000002 strPos.13701
1000006c l     O .bss	00000400 strRx.13700
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a0026b8 l       .bss_RAM5	00000000 __init_array_end
1a0026b8 l       .bss_RAM5	00000000 __preinit_array_end
1a0026b8 l       .bss_RAM5	00000000 __init_array_start
1a0026b8 l       .bss_RAM5	00000000 __preinit_array_start
1a0007ac g     F .text	0000001c Chip_Clock_GetDividerSource
1a000178  w    F .text	00000002 TIMER2_IRQHandler
1a001504 g     F .text	00000014 uartRxRead
1a000186  w    F .text	00000002 DebugMon_Handler
1a000178  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a000178  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a000178  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a000178  w    F .text	00000002 I2C0_IRQHandler
1a0015a8 g     F .text	0000001a uartReadByte
1a0016a4 g     F .text	0000003e delayRead
1a00017c  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000ede g     F .text	0000000c Chip_ADC_SetResolution
1a001464 g     F .text	0000002c SysTick_Handler
1a000c58 g     F .text	00000040 Chip_UART_SetBaud
1a0010f8  w    F .text	00000002 initialise_monitor_handles
1a000178  w    F .text	00000002 SDIO_IRQHandler
1a000178  w    F .text	00000002 ATIMER_IRQHandler
1a000188  w    F .text	00000002 PendSV_Handler
1a00017a  w    F .text	00000002 NMI_Handler
1a0026c0 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a000178  w    F .text	00000002 I2C1_IRQHandler
1a000178  w    F .text	00000002 UART1_IRQHandler
1a000178  w    F .text	00000002 GPIO5_IRQHandler
1a000178  w    F .text	00000002 CAN1_IRQHandler
53ff6788 g       *ABS*	00000000 __valid_user_code_checksum
1a0026c0 g       .ARM.exidx	00000000 _etext
1a000178  w    F .text	00000002 USB1_IRQHandler
1a000178  w    F .text	00000002 I2S0_IRQHandler
1a000178  w    F .text	00000002 TIMER3_IRQHandler
1a000a28 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178  w    F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a000178  w    F .text	00000002 SGPIO_IRQHandler
1a001828 g     F .text	00000000 .hidden __aeabi_uldivmod
10000474 g       .noinit	00000000 _noinit
1a0015dc g     F .text	00000016 uartWriteString
1000046c g     O .bss	00000004 SystemCoreClock
1a000c04 g     F .text	00000054 Chip_UART_Init
1a001096 g     F .text	00000010 Chip_DAC_UpdateValue
1a000178  w    F .text	00000002 ADC0_IRQHandler
1a000182  w    F .text	00000002 UsageFault_Handler
1a000ad8 g     F .text	0000004c Chip_Clock_GetRate
1a000178  w    F .text	00000002 GPIO6_IRQHandler
1a000338 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001858 g     F .text	000002c2 .hidden __udivmoddi4
1a001bf0 g     O .text	00000004 ExtRateIn
1a000178  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000178  w    F .text	00000002 GPIO1_IRQHandler
1a000178  w    F .text	00000002 SSP0_IRQHandler
1a0014d4 g     F .text	00000018 uartRxReady
1a0026b8 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a000e3e g     F .text	0000000e setStartMode
1a001b20 g     F .text	00000048 __libc_init_array
1a000178  w    F .text	00000002 ADC1_IRQHandler
1a000524 g     F .text	00000030 Board_Init
1a001186  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a000178  w    F .text	00000002 RTC_IRQHandler
10000474 g       .bss	00000000 _ebss
1a000eea g     F .text	00000028 Chip_ADC_EnableChannel
1a000178  w    F .text	00000002 TIMER0_IRQHandler
1a0010fc g     F .text	00000088 Reset_Handler
1a0013e8 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a000178  w    F .text	00000002 SPI_IRQHandler
1a000dbc g     F .text	0000003c Chip_I2C_SetClockRate
1a000178  w    F .text	00000002 LCD_IRQHandler
1a000760 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018c g     F .text	0000001e data_init
1a000178  w    F .text	00000002 TIMER1_IRQHandler
1a000d94 g     F .text	00000028 Chip_I2C_Init
1a000178  w    F .text	00000002 UART2_IRQHandler
1a00091c g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a001cec g     O .text	000000e6 gpioPinsInit
1a0015c2 g     F .text	0000001a uartWriteByte
1a000b50 g     F .text	00000012 Chip_SSP_SetClockRate
1a000178  w    F .text	00000002 GPIO2_IRQHandler
1a000a00 g     F .text	00000028 Chip_Clock_GetBaseClock
10000048 g       .bss	00000000 _bss
1a000eac g     F .text	00000032 Chip_ADC_SetSampleRate
1a001684 g     F .text	00000020 delayInit
1a000178  w    F .text	00000002 I2S1_IRQHandler
1a000b62 g     F .text	0000003e Chip_SSP_SetBitRate
1a000554 g     F .text	00000002 Chip_GPIO_Init
1a001c1c g     O .text	00000004 OscRateIn
1a00152c g     F .text	0000007c uartInit
10000474 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a000178  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a0011d8 g     F .text	00000194 gpioInit
1a001b1c  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0015f4 g     F .text	0000001c USB0_IRQHandler
1a000aa4 g     F .text	00000034 Chip_Clock_Disable
1a000178  w    F .text	00000002 GPIO3_IRQHandler
1a000178  w    F .text	00000002 SCT_IRQHandler
1a0007c8 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001b68 g     F .text	00000010 memset
1a00017e  w    F .text	00000002 MemManage_Handler
1a001720 g     F .text	00000108 main
1a000178  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000184  w    F .text	00000002 SVC_Handler
1a0014ec g     F .text	00000018 uartTxReady
1a000178  w    F .text	00000002 GPIO7_IRQHandler
1a000a34 g     F .text	0000003c Chip_Clock_EnableOpts
1a00108c g     F .text	0000000a Chip_DAC_DeInit
1a0007e4 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a00089c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0010c0 g     F .text	00000038 SystemInit
1a000178  w    F .text	00000002 SPIFI_IRQHandler
1a000178  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a00136c g     F .text	00000056 gpioWrite
1a001184  w    F .text	00000002 _fini
1a000e4c g     F .text	00000040 Chip_ADC_Init
10000470 g     O .bss	00000004 g_pUsbApi
1a000300 g     F .text	00000038 Board_SetupMuxing
1a000c98 g     F .text	000000dc Chip_UART_SetBaudFDR
1a0013c4 g     F .text	0000000c tickRead
10000040 g     O .data	00000008 tickRateMS
1a000f12 g     F .text	00000022 Chip_ADC_SetBurstCmd
1a000178  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a001490 g     F .text	00000044 dacInit
1a001518 g     F .text	00000014 uartTxWrite
1a000178  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a000178 g       .text	00000000 __section_table_end
1a000ba0 g     F .text	00000038 Chip_SSP_Init
1a000178  w    F .text	00000002 GINT0_IRQHandler
1a0010a6 g     F .text	00000018 Chip_DAC_SetBias
1a000178  w    F .text	00000002 DAC_IRQHandler
1a000500 g     F .text	00000024 Board_Debug_Init
1a000e8c g     F .text	00000020 Chip_ADC_Int_SetChannelCmd
10000048 g       .data	00000000 _edata
1a000d74 g     F .text	00000020 Chip_I2C_EventHandler
1a000178  w    F .text	00000002 M0SUB_IRQHandler
1a000f34 g     F .text	00000158 Chip_SetupCoreClock
1a000178  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a000558 g     F .text	00000014 SystemCoreClockUpdate
1a000178  w    F .text	00000002 DMA_IRQHandler
1a000178  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001b1c  w    F .text	00000002 .hidden __aeabi_idiv0
1a000180  w    F .text	00000002 BusFault_Handler
1a000a70 g     F .text	00000034 Chip_Clock_Enable
1a000178  w    F .text	00000002 UART3_IRQHandler
1a000178  w    F .text	00000002 MCPWM_IRQHandler
1a000178  w    F .text	00000002 M0APP_IRQHandler
1a001610 g     F .text	00000074 boardInit
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a000178  w    F .text	00000002 GINT1_IRQHandler
1a0013d0 g     F .text	00000018 tickPowerSet
1a0009a8 g     F .text	00000058 Chip_Clock_SetBaseClock
1a001188 g     F .text	0000001c cyclesCounterInit
1a000178  w    F .text	00000002 GPIO4_IRQHandler
1a0003a4 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 fd 10 00 1a 7b 01 00 1a 7d 01 00 1a     ........{...}...
1a000010:	7f 01 00 1a 81 01 00 1a 83 01 00 1a 88 67 ff 53     .............g.S
	...
1a00002c:	85 01 00 1a 87 01 00 1a 00 00 00 00 89 01 00 1a     ................
1a00003c:	65 14 00 1a                                         e...

1a000040 <g_pfnVendorVectors>:
1a000040:	79 01 00 1a 79 01 00 1a 79 01 00 1a 00 00 00 00     y...y...y.......
1a000050:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a000060:	f5 15 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     ....y...y...y...
1a000070:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a000080:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a000090:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000a0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000b0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000c0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000d0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000e0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000f0:	00 00 00 00 79 01 00 1a 79 01 00 1a 79 01 00 1a     ....y...y...y...
1a000100:	00 00 00 00 79 01 00 1a 79 01 00 1a 79 01 00 1a     ....y...y...y...
1a000110:	79 01 00 1a                                         y...

1a000114 <__data_section_table>:
1a000114:	1a0026c0 	.word	0x1a0026c0
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000048 	.word	0x00000048
1a000120:	1a0026c0 	.word	0x1a0026c0
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0026c0 	.word	0x1a0026c0
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0026c0 	.word	0x1a0026c0
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0026c0 	.word	0x1a0026c0
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000048 	.word	0x10000048
1a000154:	0000042c 	.word	0x0000042c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <ADC0_IRQHandler>:
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
1a000178:	e7fe      	b.n	1a000178 <ADC0_IRQHandler>

1a00017a <NMI_Handler>:

}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
1a00017a:	e7fe      	b.n	1a00017a <NMI_Handler>

1a00017c <HardFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
1a00017c:	e7fe      	b.n	1a00017c <HardFault_Handler>

1a00017e <MemManage_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
1a00017e:	e7fe      	b.n	1a00017e <MemManage_Handler>

1a000180 <BusFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
1a000180:	e7fe      	b.n	1a000180 <BusFault_Handler>

1a000182 <UsageFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler>

1a000184 <SVC_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
1a000184:	e7fe      	b.n	1a000184 <SVC_Handler>

1a000186 <DebugMon_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler>

1a000188 <PendSV_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler>
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
1a00018a:	e7fe      	b.n	1a00018a <PendSV_Handler+0x2>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	f850 4b04 	ldr.w	r4, [r0], #4
1a000198:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	3304      	adds	r3, #4
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	428b      	cmp	r3, r1
1a0001ae:	d204      	bcs.n	1a0001ba <bss_init+0x10>
        *pulDest++ = 0;
1a0001b0:	2200      	movs	r2, #0
1a0001b2:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
1a0001b8:	e7f8      	b.n	1a0001ac <bss_init+0x2>
}
1a0001ba:	4770      	bx	lr
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000300:	2300      	movs	r3, #0
1a000302:	2b1c      	cmp	r3, #28
1a000304:	d812      	bhi.n	1a00032c <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a000306:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000308:	4a09      	ldr	r2, [pc, #36]	; (1a000330 <Board_SetupMuxing+0x30>)
1a00030a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00030e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000312:	784a      	ldrb	r2, [r1, #1]
1a000314:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000316:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00031a:	4906      	ldr	r1, [pc, #24]	; (1a000334 <Board_SetupMuxing+0x34>)
1a00031c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000320:	3301      	adds	r3, #1
1a000322:	2b1c      	cmp	r3, #28
1a000324:	d9f0      	bls.n	1a000308 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000326:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00032a:	4770      	bx	lr
1a00032c:	4770      	bx	lr
1a00032e:	bf00      	nop
1a000330:	1a001b7c 	.word	0x1a001b7c
1a000334:	40086000 	.word	0x40086000

1a000338 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000338:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00033a:	4a17      	ldr	r2, [pc, #92]	; (1a000398 <Board_SetupClocking+0x60>)
1a00033c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000340:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000344:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000348:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a00034c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000350:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000354:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000358:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a00035c:	2201      	movs	r2, #1
1a00035e:	490f      	ldr	r1, [pc, #60]	; (1a00039c <Board_SetupClocking+0x64>)
1a000360:	2006      	movs	r0, #6
1a000362:	f000 fde7 	bl	1a000f34 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000366:	2400      	movs	r4, #0
1a000368:	b14c      	cbz	r4, 1a00037e <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00036a:	4b0b      	ldr	r3, [pc, #44]	; (1a000398 <Board_SetupClocking+0x60>)
1a00036c:	685a      	ldr	r2, [r3, #4]
1a00036e:	f022 020c 	bic.w	r2, r2, #12
1a000372:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000374:	685a      	ldr	r2, [r3, #4]
1a000376:	f042 0203 	orr.w	r2, r2, #3
1a00037a:	605a      	str	r2, [r3, #4]
}
1a00037c:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a00037e:	4808      	ldr	r0, [pc, #32]	; (1a0003a0 <Board_SetupClocking+0x68>)
1a000380:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000384:	2301      	movs	r3, #1
1a000386:	788a      	ldrb	r2, [r1, #2]
1a000388:	7849      	ldrb	r1, [r1, #1]
1a00038a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00038e:	f000 fb0b 	bl	1a0009a8 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000392:	3401      	adds	r4, #1
1a000394:	e7e8      	b.n	1a000368 <Board_SetupClocking+0x30>
1a000396:	bf00      	nop
1a000398:	40043000 	.word	0x40043000
1a00039c:	0c28cb00 	.word	0x0c28cb00
1a0003a0:	1a001b78 	.word	0x1a001b78

1a0003a4 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0003a4:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0003a6:	f7ff ffab 	bl	1a000300 <Board_SetupMuxing>
    Board_SetupClocking();
1a0003aa:	f7ff ffc5 	bl	1a000338 <Board_SetupClocking>
}
1a0003ae:	bd08      	pop	{r3, pc}

1a0003b0 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0003b0:	2200      	movs	r2, #0
1a0003b2:	2a05      	cmp	r2, #5
1a0003b4:	d819      	bhi.n	1a0003ea <Board_LED_Init+0x3a>
{
1a0003b6:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0003b8:	490c      	ldr	r1, [pc, #48]	; (1a0003ec <Board_LED_Init+0x3c>)
1a0003ba:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0003be:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0003c2:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0003c4:	4b0a      	ldr	r3, [pc, #40]	; (1a0003f0 <Board_LED_Init+0x40>)
1a0003c6:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0003ca:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0003ce:	2001      	movs	r0, #1
1a0003d0:	40a0      	lsls	r0, r4
1a0003d2:	4301      	orrs	r1, r0
1a0003d4:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0003d8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0003dc:	2100      	movs	r1, #0
1a0003de:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0003e0:	3201      	adds	r2, #1
1a0003e2:	2a05      	cmp	r2, #5
1a0003e4:	d9e8      	bls.n	1a0003b8 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0003e6:	bc70      	pop	{r4, r5, r6}
1a0003e8:	4770      	bx	lr
1a0003ea:	4770      	bx	lr
1a0003ec:	1a001bfc 	.word	0x1a001bfc
1a0003f0:	400f4000 	.word	0x400f4000

1a0003f4 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0003f4:	2300      	movs	r3, #0
1a0003f6:	2b03      	cmp	r3, #3
1a0003f8:	d816      	bhi.n	1a000428 <Board_TEC_Init+0x34>
{
1a0003fa:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0003fc:	490b      	ldr	r1, [pc, #44]	; (1a00042c <Board_TEC_Init+0x38>)
1a0003fe:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000402:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000406:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000408:	4c09      	ldr	r4, [pc, #36]	; (1a000430 <Board_TEC_Init+0x3c>)
1a00040a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00040e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000412:	2001      	movs	r0, #1
1a000414:	40a8      	lsls	r0, r5
1a000416:	ea21 0100 	bic.w	r1, r1, r0
1a00041a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a00041e:	3301      	adds	r3, #1
1a000420:	2b03      	cmp	r3, #3
1a000422:	d9eb      	bls.n	1a0003fc <Board_TEC_Init+0x8>
   }
}
1a000424:	bc30      	pop	{r4, r5}
1a000426:	4770      	bx	lr
1a000428:	4770      	bx	lr
1a00042a:	bf00      	nop
1a00042c:	1a001bf4 	.word	0x1a001bf4
1a000430:	400f4000 	.word	0x400f4000

1a000434 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000434:	2300      	movs	r3, #0
1a000436:	2b08      	cmp	r3, #8
1a000438:	d816      	bhi.n	1a000468 <Board_GPIO_Init+0x34>
{
1a00043a:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a00043c:	490b      	ldr	r1, [pc, #44]	; (1a00046c <Board_GPIO_Init+0x38>)
1a00043e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000442:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000446:	784d      	ldrb	r5, [r1, #1]
1a000448:	4c09      	ldr	r4, [pc, #36]	; (1a000470 <Board_GPIO_Init+0x3c>)
1a00044a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00044e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000452:	2001      	movs	r0, #1
1a000454:	40a8      	lsls	r0, r5
1a000456:	ea21 0100 	bic.w	r1, r1, r0
1a00045a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00045e:	3301      	adds	r3, #1
1a000460:	2b08      	cmp	r3, #8
1a000462:	d9eb      	bls.n	1a00043c <Board_GPIO_Init+0x8>
   }
}
1a000464:	bc30      	pop	{r4, r5}
1a000466:	4770      	bx	lr
1a000468:	4770      	bx	lr
1a00046a:	bf00      	nop
1a00046c:	1a001c08 	.word	0x1a001c08
1a000470:	400f4000 	.word	0x400f4000

1a000474 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000474:	b510      	push	{r4, lr}
1a000476:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a000478:	4c08      	ldr	r4, [pc, #32]	; (1a00049c <Board_ADC_Init+0x28>)
1a00047a:	4669      	mov	r1, sp
1a00047c:	4620      	mov	r0, r4
1a00047e:	f000 fce5 	bl	1a000e4c <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a000482:	4a07      	ldr	r2, [pc, #28]	; (1a0004a0 <Board_ADC_Init+0x2c>)
1a000484:	4669      	mov	r1, sp
1a000486:	4620      	mov	r0, r4
1a000488:	f000 fd10 	bl	1a000eac <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a00048c:	2200      	movs	r2, #0
1a00048e:	4669      	mov	r1, sp
1a000490:	4620      	mov	r0, r4
1a000492:	f000 fd24 	bl	1a000ede <Chip_ADC_SetResolution>
}
1a000496:	b002      	add	sp, #8
1a000498:	bd10      	pop	{r4, pc}
1a00049a:	bf00      	nop
1a00049c:	400e3000 	.word	0x400e3000
1a0004a0:	00061a80 	.word	0x00061a80

1a0004a4 <Board_SPI_Init>:
{
1a0004a4:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a0004a6:	4c0b      	ldr	r4, [pc, #44]	; (1a0004d4 <Board_SPI_Init+0x30>)
1a0004a8:	4620      	mov	r0, r4
1a0004aa:	f000 fb79 	bl	1a000ba0 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0004ae:	6863      	ldr	r3, [r4, #4]
1a0004b0:	f023 0304 	bic.w	r3, r3, #4
1a0004b4:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0004b6:	6823      	ldr	r3, [r4, #0]
1a0004b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0004bc:	f043 0307 	orr.w	r3, r3, #7
1a0004c0:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0004c2:	4905      	ldr	r1, [pc, #20]	; (1a0004d8 <Board_SPI_Init+0x34>)
1a0004c4:	4620      	mov	r0, r4
1a0004c6:	f000 fb4c 	bl	1a000b62 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0004ca:	6863      	ldr	r3, [r4, #4]
1a0004cc:	f043 0302 	orr.w	r3, r3, #2
1a0004d0:	6063      	str	r3, [r4, #4]
}
1a0004d2:	bd10      	pop	{r4, pc}
1a0004d4:	400c5000 	.word	0x400c5000
1a0004d8:	000186a0 	.word	0x000186a0

1a0004dc <Board_I2C_Init>:
{
1a0004dc:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a0004de:	2000      	movs	r0, #0
1a0004e0:	f000 fc58 	bl	1a000d94 <Chip_I2C_Init>
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0004e4:	4b04      	ldr	r3, [pc, #16]	; (1a0004f8 <Board_I2C_Init+0x1c>)
1a0004e6:	f640 0208 	movw	r2, #2056	; 0x808
1a0004ea:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0004ee:	4903      	ldr	r1, [pc, #12]	; (1a0004fc <Board_I2C_Init+0x20>)
1a0004f0:	2000      	movs	r0, #0
1a0004f2:	f000 fc63 	bl	1a000dbc <Chip_I2C_SetClockRate>
}
1a0004f6:	bd08      	pop	{r3, pc}
1a0004f8:	40086000 	.word	0x40086000
1a0004fc:	000f4240 	.word	0x000f4240

1a000500 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000500:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a000502:	4c07      	ldr	r4, [pc, #28]	; (1a000520 <Board_Debug_Init+0x20>)
1a000504:	4620      	mov	r0, r4
1a000506:	f000 fb7d 	bl	1a000c04 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00050a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00050e:	4620      	mov	r0, r4
1a000510:	f000 fbc2 	bl	1a000c98 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000514:	2303      	movs	r3, #3
1a000516:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000518:	2301      	movs	r3, #1
1a00051a:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a00051c:	bd10      	pop	{r4, pc}
1a00051e:	bf00      	nop
1a000520:	400c1000 	.word	0x400c1000

1a000524 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000524:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000526:	f7ff ffeb 	bl	1a000500 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00052a:	4809      	ldr	r0, [pc, #36]	; (1a000550 <Board_Init+0x2c>)
1a00052c:	f000 f812 	bl	1a000554 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a000530:	f7ff ff80 	bl	1a000434 <Board_GPIO_Init>
   Board_ADC_Init();
1a000534:	f7ff ff9e 	bl	1a000474 <Board_ADC_Init>
   Board_SPI_Init();
1a000538:	f7ff ffb4 	bl	1a0004a4 <Board_SPI_Init>
   Board_I2C_Init();
1a00053c:	f7ff ffce 	bl	1a0004dc <Board_I2C_Init>

   Board_LED_Init();
1a000540:	f7ff ff36 	bl	1a0003b0 <Board_LED_Init>
   Board_TEC_Init();
1a000544:	f7ff ff56 	bl	1a0003f4 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000548:	f000 f806 	bl	1a000558 <SystemCoreClockUpdate>
}
1a00054c:	bd08      	pop	{r3, pc}
1a00054e:	bf00      	nop
1a000550:	400f4000 	.word	0x400f4000

1a000554 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a000554:	4770      	bx	lr
1a000556:	Address 0x1a000556 is out of bounds.


1a000558 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000558:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00055a:	2069      	movs	r0, #105	; 0x69
1a00055c:	f000 fabc 	bl	1a000ad8 <Chip_Clock_GetRate>
1a000560:	4b01      	ldr	r3, [pc, #4]	; (1a000568 <SystemCoreClockUpdate+0x10>)
1a000562:	6018      	str	r0, [r3, #0]
}
1a000564:	bd08      	pop	{r3, pc}
1a000566:	bf00      	nop
1a000568:	1000046c 	.word	0x1000046c

1a00056c <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00056c:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a00056e:	680b      	ldr	r3, [r1, #0]
1a000570:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000574:	d002      	beq.n	1a00057c <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00057a:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a00057c:	4607      	mov	r7, r0
1a00057e:	2501      	movs	r5, #1
1a000580:	e03a      	b.n	1a0005f8 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000582:	694b      	ldr	r3, [r1, #20]
1a000584:	fb03 f302 	mul.w	r3, r3, r2
1a000588:	fbb3 f3f5 	udiv	r3, r3, r5
1a00058c:	e01c      	b.n	1a0005c8 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a00058e:	461c      	mov	r4, r3
	if (val < 0)
1a000590:	ebb0 0c04 	subs.w	ip, r0, r4
1a000594:	d427      	bmi.n	1a0005e6 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a000596:	4567      	cmp	r7, ip
1a000598:	d906      	bls.n	1a0005a8 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a00059a:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a00059c:	1c77      	adds	r7, r6, #1
1a00059e:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0005a0:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0005a2:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0005a4:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0005a6:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a0005a8:	3201      	adds	r2, #1
1a0005aa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0005ae:	dc1d      	bgt.n	1a0005ec <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a0005b0:	680c      	ldr	r4, [r1, #0]
1a0005b2:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0005b6:	d0e4      	beq.n	1a000582 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0005b8:	1c73      	adds	r3, r6, #1
1a0005ba:	fa02 fc03 	lsl.w	ip, r2, r3
1a0005be:	694b      	ldr	r3, [r1, #20]
1a0005c0:	fb03 f30c 	mul.w	r3, r3, ip
1a0005c4:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0005c8:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a000604 <pll_calc_divs+0x98>
1a0005cc:	4563      	cmp	r3, ip
1a0005ce:	d9eb      	bls.n	1a0005a8 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0005d0:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a000608 <pll_calc_divs+0x9c>
1a0005d4:	4563      	cmp	r3, ip
1a0005d6:	d809      	bhi.n	1a0005ec <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a0005d8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0005dc:	d1d7      	bne.n	1a00058e <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a0005de:	1c74      	adds	r4, r6, #1
1a0005e0:	fa23 f404 	lsr.w	r4, r3, r4
1a0005e4:	e7d4      	b.n	1a000590 <pll_calc_divs+0x24>
		return -val;
1a0005e6:	f1cc 0c00 	rsb	ip, ip, #0
1a0005ea:	e7d4      	b.n	1a000596 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a0005ec:	3601      	adds	r6, #1
1a0005ee:	2e03      	cmp	r6, #3
1a0005f0:	dc01      	bgt.n	1a0005f6 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a0005f2:	2201      	movs	r2, #1
1a0005f4:	e7d9      	b.n	1a0005aa <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a0005f6:	3501      	adds	r5, #1
1a0005f8:	2d04      	cmp	r5, #4
1a0005fa:	dc01      	bgt.n	1a000600 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a0005fc:	2600      	movs	r6, #0
1a0005fe:	e7f6      	b.n	1a0005ee <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a000600:	bcf0      	pop	{r4, r5, r6, r7}
1a000602:	4770      	bx	lr
1a000604:	094c5eff 	.word	0x094c5eff
1a000608:	1312d000 	.word	0x1312d000

1a00060c <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00060c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00060e:	b099      	sub	sp, #100	; 0x64
1a000610:	4605      	mov	r5, r0
1a000612:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000614:	225c      	movs	r2, #92	; 0x5c
1a000616:	2100      	movs	r1, #0
1a000618:	a801      	add	r0, sp, #4
1a00061a:	f001 faa5 	bl	1a001b68 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a00061e:	2380      	movs	r3, #128	; 0x80
1a000620:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000622:	6963      	ldr	r3, [r4, #20]
1a000624:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000626:	7923      	ldrb	r3, [r4, #4]
1a000628:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a00062c:	4669      	mov	r1, sp
1a00062e:	4628      	mov	r0, r5
1a000630:	f7ff ff9c 	bl	1a00056c <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000634:	9b06      	ldr	r3, [sp, #24]
1a000636:	42ab      	cmp	r3, r5
1a000638:	d027      	beq.n	1a00068a <pll_get_frac+0x7e>
	if (val < 0)
1a00063a:	1aeb      	subs	r3, r5, r3
1a00063c:	d42e      	bmi.n	1a00069c <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a00063e:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000640:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000646:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000648:	6963      	ldr	r3, [r4, #20]
1a00064a:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a00064c:	7923      	ldrb	r3, [r4, #4]
1a00064e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000652:	a910      	add	r1, sp, #64	; 0x40
1a000654:	4628      	mov	r0, r5
1a000656:	f7ff ff89 	bl	1a00056c <pll_calc_divs>
	if (pll[2].fout == freq) {
1a00065a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a00065c:	42ab      	cmp	r3, r5
1a00065e:	d01f      	beq.n	1a0006a0 <pll_get_frac+0x94>
	if (val < 0)
1a000660:	1aeb      	subs	r3, r5, r3
1a000662:	d425      	bmi.n	1a0006b0 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000664:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000666:	4b2b      	ldr	r3, [pc, #172]	; (1a000714 <pll_get_frac+0x108>)
1a000668:	429d      	cmp	r5, r3
1a00066a:	d923      	bls.n	1a0006b4 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a00066c:	980e      	ldr	r0, [sp, #56]	; 0x38
	if (val < 0)
1a00066e:	1a2d      	subs	r5, r5, r0
1a000670:	d433      	bmi.n	1a0006da <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000672:	42ae      	cmp	r6, r5
1a000674:	dc3b      	bgt.n	1a0006ee <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000676:	42be      	cmp	r6, r7
1a000678:	dc31      	bgt.n	1a0006de <pll_get_frac+0xd2>
			*ppll = pll[0];
1a00067a:	466d      	mov	r5, sp
1a00067c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00067e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000680:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000684:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000688:	e006      	b.n	1a000698 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a00068a:	466d      	mov	r5, sp
1a00068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000690:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000694:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000698:	b019      	add	sp, #100	; 0x64
1a00069a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a00069c:	425b      	negs	r3, r3
1a00069e:	e7ce      	b.n	1a00063e <pll_get_frac+0x32>
		*ppll = pll[2];
1a0006a0:	ad10      	add	r5, sp, #64	; 0x40
1a0006a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0006a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0006a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0006aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0006ae:	e7f3      	b.n	1a000698 <pll_get_frac+0x8c>
		return -val;
1a0006b0:	425b      	negs	r3, r3
1a0006b2:	e7d7      	b.n	1a000664 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a0006b4:	2340      	movs	r3, #64	; 0x40
1a0006b6:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0006b8:	6963      	ldr	r3, [r4, #20]
1a0006ba:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0006bc:	a908      	add	r1, sp, #32
1a0006be:	4628      	mov	r0, r5
1a0006c0:	f7ff ff54 	bl	1a00056c <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0006c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0006c6:	42ab      	cmp	r3, r5
1a0006c8:	d1d0      	bne.n	1a00066c <pll_get_frac+0x60>
			*ppll = pll[1];
1a0006ca:	ad08      	add	r5, sp, #32
1a0006cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0006ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0006d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0006d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0006d8:	e7de      	b.n	1a000698 <pll_get_frac+0x8c>
		return -val;
1a0006da:	426d      	negs	r5, r5
1a0006dc:	e7c9      	b.n	1a000672 <pll_get_frac+0x66>
			*ppll = pll[2];
1a0006de:	ad10      	add	r5, sp, #64	; 0x40
1a0006e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0006e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0006e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0006e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0006ec:	e7d4      	b.n	1a000698 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a0006ee:	42af      	cmp	r7, r5
1a0006f0:	db07      	blt.n	1a000702 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a0006f2:	ad08      	add	r5, sp, #32
1a0006f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0006f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0006f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0006fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000700:	e7ca      	b.n	1a000698 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000702:	ad10      	add	r5, sp, #64	; 0x40
1a000704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000708:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00070c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000710:	e7c2      	b.n	1a000698 <pll_get_frac+0x8c>
1a000712:	bf00      	nop
1a000714:	068e7780 	.word	0x068e7780

1a000718 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000718:	b430      	push	{r4, r5}
1a00071a:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a00071c:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a00071e:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000720:	e000      	b.n	1a000724 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000722:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000724:	281c      	cmp	r0, #28
1a000726:	d117      	bne.n	1a000758 <Chip_Clock_FindBaseClock+0x40>
1a000728:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00072c:	490b      	ldr	r1, [pc, #44]	; (1a00075c <Chip_Clock_FindBaseClock+0x44>)
1a00072e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
1a000732:	7911      	ldrb	r1, [r2, #4]
1a000734:	4281      	cmp	r1, r0
1a000736:	d00f      	beq.n	1a000758 <Chip_Clock_FindBaseClock+0x40>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000738:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00073c:	4c07      	ldr	r4, [pc, #28]	; (1a00075c <Chip_Clock_FindBaseClock+0x44>)
1a00073e:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
1a000742:	42aa      	cmp	r2, r5
1a000744:	d8ed      	bhi.n	1a000722 <Chip_Clock_FindBaseClock+0xa>
1a000746:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00074a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
1a00074e:	8852      	ldrh	r2, [r2, #2]
1a000750:	42aa      	cmp	r2, r5
1a000752:	d3e6      	bcc.n	1a000722 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000754:	4608      	mov	r0, r1
1a000756:	e7e5      	b.n	1a000724 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000758:	bc30      	pop	{r4, r5}
1a00075a:	4770      	bx	lr
1a00075c:	1a001c28 	.word	0x1a001c28

1a000760 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000760:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000766:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000768:	4a0d      	ldr	r2, [pc, #52]	; (1a0007a0 <Chip_Clock_EnableCrystal+0x40>)
1a00076a:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a00076c:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000770:	6992      	ldr	r2, [r2, #24]
1a000772:	428a      	cmp	r2, r1
1a000774:	d001      	beq.n	1a00077a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000776:	4a0a      	ldr	r2, [pc, #40]	; (1a0007a0 <Chip_Clock_EnableCrystal+0x40>)
1a000778:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a00077a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a00077e:	4a09      	ldr	r2, [pc, #36]	; (1a0007a4 <Chip_Clock_EnableCrystal+0x44>)
1a000780:	6811      	ldr	r1, [r2, #0]
1a000782:	4a09      	ldr	r2, [pc, #36]	; (1a0007a8 <Chip_Clock_EnableCrystal+0x48>)
1a000784:	4291      	cmp	r1, r2
1a000786:	d901      	bls.n	1a00078c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000788:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00078c:	4a04      	ldr	r2, [pc, #16]	; (1a0007a0 <Chip_Clock_EnableCrystal+0x40>)
1a00078e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000790:	9b01      	ldr	r3, [sp, #4]
1a000792:	1e5a      	subs	r2, r3, #1
1a000794:	9201      	str	r2, [sp, #4]
1a000796:	2b00      	cmp	r3, #0
1a000798:	d1fa      	bne.n	1a000790 <Chip_Clock_EnableCrystal+0x30>
}
1a00079a:	b002      	add	sp, #8
1a00079c:	4770      	bx	lr
1a00079e:	bf00      	nop
1a0007a0:	40050000 	.word	0x40050000
1a0007a4:	1a001c1c 	.word	0x1a001c1c
1a0007a8:	01312cff 	.word	0x01312cff

1a0007ac <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0007ac:	3012      	adds	r0, #18
1a0007ae:	4b05      	ldr	r3, [pc, #20]	; (1a0007c4 <Chip_Clock_GetDividerSource+0x18>)
1a0007b0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0007b4:	f010 0f01 	tst.w	r0, #1
1a0007b8:	d102      	bne.n	1a0007c0 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0007ba:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0007be:	4770      	bx	lr
		return CLKINPUT_PD;
1a0007c0:	2011      	movs	r0, #17
}
1a0007c2:	4770      	bx	lr
1a0007c4:	40050000 	.word	0x40050000

1a0007c8 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0007c8:	f100 0212 	add.w	r2, r0, #18
1a0007cc:	4b03      	ldr	r3, [pc, #12]	; (1a0007dc <Chip_Clock_GetDividerDivisor+0x14>)
1a0007ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0007d2:	4b03      	ldr	r3, [pc, #12]	; (1a0007e0 <Chip_Clock_GetDividerDivisor+0x18>)
1a0007d4:	5c18      	ldrb	r0, [r3, r0]
}
1a0007d6:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0007da:	4770      	bx	lr
1a0007dc:	40050000 	.word	0x40050000
1a0007e0:	1a001c20 	.word	0x1a001c20

1a0007e4 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0007e4:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a0007e6:	2810      	cmp	r0, #16
1a0007e8:	d80a      	bhi.n	1a000800 <Chip_Clock_GetClockInputHz+0x1c>
1a0007ea:	e8df f000 	tbb	[pc, r0]
1a0007ee:	0b44      	.short	0x0b44
1a0007f0:	0921180d 	.word	0x0921180d
1a0007f4:	2d2a2724 	.word	0x2d2a2724
1a0007f8:	34300909 	.word	0x34300909
1a0007fc:	3c38      	.short	0x3c38
1a0007fe:	40          	.byte	0x40
1a0007ff:	00          	.byte	0x00
	uint32_t rate = 0;
1a000800:	2000      	movs	r0, #0
	default:
		break;
	}

	return rate;
}
1a000802:	bd08      	pop	{r3, pc}
		rate = CGU_IRC_FREQ;
1a000804:	481e      	ldr	r0, [pc, #120]	; (1a000880 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000806:	e7fc      	b.n	1a000802 <Chip_Clock_GetClockInputHz+0x1e>
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000808:	4b1e      	ldr	r3, [pc, #120]	; (1a000884 <Chip_Clock_GetClockInputHz+0xa0>)
1a00080a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00080e:	f003 0307 	and.w	r3, r3, #7
1a000812:	2b04      	cmp	r3, #4
1a000814:	d001      	beq.n	1a00081a <Chip_Clock_GetClockInputHz+0x36>
			rate = 25000000;
1a000816:	481c      	ldr	r0, [pc, #112]	; (1a000888 <Chip_Clock_GetClockInputHz+0xa4>)
1a000818:	e7f3      	b.n	1a000802 <Chip_Clock_GetClockInputHz+0x1e>
	uint32_t rate = 0;
1a00081a:	2000      	movs	r0, #0
1a00081c:	e7f1      	b.n	1a000802 <Chip_Clock_GetClockInputHz+0x1e>
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00081e:	4b19      	ldr	r3, [pc, #100]	; (1a000884 <Chip_Clock_GetClockInputHz+0xa0>)
1a000820:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000824:	f003 0307 	and.w	r3, r3, #7
1a000828:	2b04      	cmp	r3, #4
1a00082a:	d027      	beq.n	1a00087c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a00082c:	4816      	ldr	r0, [pc, #88]	; (1a000888 <Chip_Clock_GetClockInputHz+0xa4>)
1a00082e:	e7e8      	b.n	1a000802 <Chip_Clock_GetClockInputHz+0x1e>
		rate = ExtRateIn;
1a000830:	4b16      	ldr	r3, [pc, #88]	; (1a00088c <Chip_Clock_GetClockInputHz+0xa8>)
1a000832:	6818      	ldr	r0, [r3, #0]
		break;
1a000834:	e7e5      	b.n	1a000802 <Chip_Clock_GetClockInputHz+0x1e>
		rate = OscRateIn;
1a000836:	4b16      	ldr	r3, [pc, #88]	; (1a000890 <Chip_Clock_GetClockInputHz+0xac>)
1a000838:	6818      	ldr	r0, [r3, #0]
		break;
1a00083a:	e7e2      	b.n	1a000802 <Chip_Clock_GetClockInputHz+0x1e>
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a00083c:	4b15      	ldr	r3, [pc, #84]	; (1a000894 <Chip_Clock_GetClockInputHz+0xb0>)
1a00083e:	6818      	ldr	r0, [r3, #0]
		break;
1a000840:	e7df      	b.n	1a000802 <Chip_Clock_GetClockInputHz+0x1e>
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000842:	4b14      	ldr	r3, [pc, #80]	; (1a000894 <Chip_Clock_GetClockInputHz+0xb0>)
1a000844:	6858      	ldr	r0, [r3, #4]
		break;
1a000846:	e7dc      	b.n	1a000802 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetMainPLLHz();
1a000848:	f000 f868 	bl	1a00091c <Chip_Clock_GetMainPLLHz>
		break;
1a00084c:	e7d9      	b.n	1a000802 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a00084e:	2100      	movs	r1, #0
1a000850:	f000 f898 	bl	1a000984 <Chip_Clock_GetDivRate>
		break;
1a000854:	e7d5      	b.n	1a000802 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000856:	2101      	movs	r1, #1
1a000858:	f000 f894 	bl	1a000984 <Chip_Clock_GetDivRate>
		break;
1a00085c:	e7d1      	b.n	1a000802 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a00085e:	2102      	movs	r1, #2
1a000860:	f000 f890 	bl	1a000984 <Chip_Clock_GetDivRate>
		break;
1a000864:	e7cd      	b.n	1a000802 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000866:	2103      	movs	r1, #3
1a000868:	f000 f88c 	bl	1a000984 <Chip_Clock_GetDivRate>
		break;
1a00086c:	e7c9      	b.n	1a000802 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a00086e:	2104      	movs	r1, #4
1a000870:	f000 f888 	bl	1a000984 <Chip_Clock_GetDivRate>
		break;
1a000874:	e7c5      	b.n	1a000802 <Chip_Clock_GetClockInputHz+0x1e>
		rate = CRYSTAL_32K_FREQ_IN;
1a000876:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a00087a:	e7c2      	b.n	1a000802 <Chip_Clock_GetClockInputHz+0x1e>
			rate = 50000000; /* RMII uses 50 MHz */
1a00087c:	4806      	ldr	r0, [pc, #24]	; (1a000898 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a00087e:	e7c0      	b.n	1a000802 <Chip_Clock_GetClockInputHz+0x1e>
1a000880:	00b71b00 	.word	0x00b71b00
1a000884:	40043000 	.word	0x40043000
1a000888:	017d7840 	.word	0x017d7840
1a00088c:	1a001bf0 	.word	0x1a001bf0
1a000890:	1a001c1c 	.word	0x1a001c1c
1a000894:	10000048 	.word	0x10000048
1a000898:	02faf080 	.word	0x02faf080

1a00089c <Chip_Clock_CalcMainPLLValue>:
{
1a00089c:	b538      	push	{r3, r4, r5, lr}
1a00089e:	4605      	mov	r5, r0
1a0008a0:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0008a2:	7908      	ldrb	r0, [r1, #4]
1a0008a4:	f7ff ff9e 	bl	1a0007e4 <Chip_Clock_GetClockInputHz>
1a0008a8:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0008aa:	4b19      	ldr	r3, [pc, #100]	; (1a000910 <Chip_Clock_CalcMainPLLValue+0x74>)
1a0008ac:	442b      	add	r3, r5
1a0008ae:	4a19      	ldr	r2, [pc, #100]	; (1a000914 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0008b0:	4293      	cmp	r3, r2
1a0008b2:	d821      	bhi.n	1a0008f8 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0008b4:	b318      	cbz	r0, 1a0008fe <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0008b6:	2380      	movs	r3, #128	; 0x80
1a0008b8:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0008ba:	2300      	movs	r3, #0
1a0008bc:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0008be:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0008c0:	fbb5 f3f0 	udiv	r3, r5, r0
1a0008c4:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0008c6:	4a14      	ldr	r2, [pc, #80]	; (1a000918 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0008c8:	4295      	cmp	r5, r2
1a0008ca:	d903      	bls.n	1a0008d4 <Chip_Clock_CalcMainPLLValue+0x38>
1a0008cc:	fb03 f000 	mul.w	r0, r3, r0
1a0008d0:	42a8      	cmp	r0, r5
1a0008d2:	d007      	beq.n	1a0008e4 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0008d4:	4621      	mov	r1, r4
1a0008d6:	4628      	mov	r0, r5
1a0008d8:	f7ff fe98 	bl	1a00060c <pll_get_frac>
		if (!ppll->nsel) {
1a0008dc:	68a3      	ldr	r3, [r4, #8]
1a0008de:	b18b      	cbz	r3, 1a000904 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a0008e0:	3b01      	subs	r3, #1
1a0008e2:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a0008e4:	6923      	ldr	r3, [r4, #16]
1a0008e6:	b183      	cbz	r3, 1a00090a <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a0008e8:	68e2      	ldr	r2, [r4, #12]
1a0008ea:	b10a      	cbz	r2, 1a0008f0 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a0008ec:	3a01      	subs	r2, #1
1a0008ee:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a0008f0:	3b01      	subs	r3, #1
1a0008f2:	6123      	str	r3, [r4, #16]
	return 0;
1a0008f4:	2000      	movs	r0, #0
}
1a0008f6:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a0008f8:	f04f 30ff 	mov.w	r0, #4294967295
1a0008fc:	e7fb      	b.n	1a0008f6 <Chip_Clock_CalcMainPLLValue+0x5a>
1a0008fe:	f04f 30ff 	mov.w	r0, #4294967295
1a000902:	e7f8      	b.n	1a0008f6 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a000904:	f04f 30ff 	mov.w	r0, #4294967295
1a000908:	e7f5      	b.n	1a0008f6 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a00090a:	f04f 30ff 	mov.w	r0, #4294967295
1a00090e:	e7f2      	b.n	1a0008f6 <Chip_Clock_CalcMainPLLValue+0x5a>
1a000910:	ff6b3a10 	.word	0xff6b3a10
1a000914:	0b940510 	.word	0x0b940510
1a000918:	094c5eff 	.word	0x094c5eff

1a00091c <Chip_Clock_GetMainPLLHz>:
{
1a00091c:	b570      	push	{r4, r5, r6, lr}
1a00091e:	b082      	sub	sp, #8
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000920:	4d16      	ldr	r5, [pc, #88]	; (1a00097c <Chip_Clock_GetMainPLLHz+0x60>)
1a000922:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000924:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000928:	f7ff ff5c 	bl	1a0007e4 <Chip_Clock_GetClockInputHz>
1a00092c:	4606      	mov	r6, r0
	const uint8_t ptab[] = {1, 2, 4, 8};
1a00092e:	4a14      	ldr	r2, [pc, #80]	; (1a000980 <Chip_Clock_GetMainPLLHz+0x64>)
1a000930:	9201      	str	r2, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000932:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a000934:	f010 0001 	ands.w	r0, r0, #1
1a000938:	d01d      	beq.n	1a000976 <Chip_Clock_GetMainPLLHz+0x5a>
	msel = (PLLReg >> 16) & 0xFF;
1a00093a:	f3c4 4207 	ubfx	r2, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00093e:	f3c4 3101 	ubfx	r1, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a000942:	f3c4 2501 	ubfx	r5, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a000946:	f3c4 1080 	ubfx	r0, r4, #6, #1
	m = msel + 1;
1a00094a:	3201      	adds	r2, #1
	n = nsel + 1;
1a00094c:	3101      	adds	r1, #1
	p = ptab[psel];
1a00094e:	ab02      	add	r3, sp, #8
1a000950:	441d      	add	r5, r3
1a000952:	f815 3c04 	ldrb.w	r3, [r5, #-4]
	if (direct || fbsel) {
1a000956:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00095a:	d108      	bne.n	1a00096e <Chip_Clock_GetMainPLLHz+0x52>
1a00095c:	b938      	cbnz	r0, 1a00096e <Chip_Clock_GetMainPLLHz+0x52>
	return (m / (2 * p)) * (freq / n);
1a00095e:	0058      	lsls	r0, r3, #1
1a000960:	fbb2 f2f0 	udiv	r2, r2, r0
1a000964:	fbb6 f0f1 	udiv	r0, r6, r1
1a000968:	fb00 f002 	mul.w	r0, r0, r2
1a00096c:	e003      	b.n	1a000976 <Chip_Clock_GetMainPLLHz+0x5a>
		return m * (freq / n);
1a00096e:	fbb6 f0f1 	udiv	r0, r6, r1
1a000972:	fb02 f000 	mul.w	r0, r2, r0
}
1a000976:	b002      	add	sp, #8
1a000978:	bd70      	pop	{r4, r5, r6, pc}
1a00097a:	bf00      	nop
1a00097c:	40050000 	.word	0x40050000
1a000980:	08040201 	.word	0x08040201

1a000984 <Chip_Clock_GetDivRate>:
{
1a000984:	b538      	push	{r3, r4, r5, lr}
1a000986:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a000988:	4608      	mov	r0, r1
1a00098a:	f7ff ff0f 	bl	1a0007ac <Chip_Clock_GetDividerSource>
1a00098e:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a000990:	4620      	mov	r0, r4
1a000992:	f7ff ff19 	bl	1a0007c8 <Chip_Clock_GetDividerDivisor>
1a000996:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000998:	4628      	mov	r0, r5
1a00099a:	f7ff ff23 	bl	1a0007e4 <Chip_Clock_GetClockInputHz>
1a00099e:	3401      	adds	r4, #1
}
1a0009a0:	fbb0 f0f4 	udiv	r0, r0, r4
1a0009a4:	bd38      	pop	{r3, r4, r5, pc}
1a0009a6:	Address 0x1a0009a6 is out of bounds.


1a0009a8 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0009a8:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0009aa:	f100 0416 	add.w	r4, r0, #22
1a0009ae:	00a4      	lsls	r4, r4, #2
1a0009b0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0009b4:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0009b8:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a0009ba:	281b      	cmp	r0, #27
1a0009bc:	d813      	bhi.n	1a0009e6 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a0009be:	2911      	cmp	r1, #17
1a0009c0:	d01a      	beq.n	1a0009f8 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0009c2:	4d0e      	ldr	r5, [pc, #56]	; (1a0009fc <Chip_Clock_SetBaseClock+0x54>)
1a0009c4:	4025      	ands	r5, r4

			if (autoblocken) {
1a0009c6:	b10a      	cbz	r2, 1a0009cc <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a0009c8:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a0009cc:	b10b      	cbz	r3, 1a0009d2 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a0009ce:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0009d2:	ea45 6101 	orr.w	r1, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0009d6:	3016      	adds	r0, #22
1a0009d8:	0080      	lsls	r0, r0, #2
1a0009da:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0009de:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0009e2:	6041      	str	r1, [r0, #4]
1a0009e4:	e008      	b.n	1a0009f8 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0009e6:	f044 0401 	orr.w	r4, r4, #1
1a0009ea:	3016      	adds	r0, #22
1a0009ec:	0080      	lsls	r0, r0, #2
1a0009ee:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0009f2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0009f6:	6044      	str	r4, [r0, #4]
	}
}
1a0009f8:	bc30      	pop	{r4, r5}
1a0009fa:	4770      	bx	lr
1a0009fc:	e0fff7fe 	.word	0xe0fff7fe

1a000a00 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a000a00:	281b      	cmp	r0, #27
1a000a02:	d80d      	bhi.n	1a000a20 <Chip_Clock_GetBaseClock+0x20>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a000a04:	f100 0316 	add.w	r3, r0, #22
1a000a08:	009b      	lsls	r3, r3, #2
1a000a0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
1a000a0e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
1a000a12:	6858      	ldr	r0, [r3, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a000a14:	f010 0f01 	tst.w	r0, #1
1a000a18:	d104      	bne.n	1a000a24 <Chip_Clock_GetBaseClock+0x24>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000a1a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000a1e:	4770      	bx	lr
		return CLKINPUT_PD;
1a000a20:	2011      	movs	r0, #17
1a000a22:	4770      	bx	lr
		return CLKINPUT_PD;
1a000a24:	2011      	movs	r0, #17
}
1a000a26:	4770      	bx	lr

1a000a28 <Chip_Clock_GetBaseClocktHz>:
{
1a000a28:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000a2a:	f7ff ffe9 	bl	1a000a00 <Chip_Clock_GetBaseClock>
1a000a2e:	f7ff fed9 	bl	1a0007e4 <Chip_Clock_GetClockInputHz>
}
1a000a32:	bd08      	pop	{r3, pc}

1a000a34 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a000a34:	b971      	cbnz	r1, 1a000a54 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a000a36:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a000a38:	b10a      	cbz	r2, 1a000a3e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a000a3a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a000a3e:	2b02      	cmp	r3, #2
1a000a40:	d00a      	beq.n	1a000a58 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a000a42:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000a46:	d30a      	bcc.n	1a000a5e <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000a48:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000a4c:	4b06      	ldr	r3, [pc, #24]	; (1a000a68 <Chip_Clock_EnableOpts+0x34>)
1a000a4e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000a52:	4770      	bx	lr
		reg |= (1 << 1);
1a000a54:	2103      	movs	r1, #3
1a000a56:	e7ef      	b.n	1a000a38 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a000a58:	f041 0120 	orr.w	r1, r1, #32
1a000a5c:	e7f1      	b.n	1a000a42 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000a5e:	3020      	adds	r0, #32
1a000a60:	4b02      	ldr	r3, [pc, #8]	; (1a000a6c <Chip_Clock_EnableOpts+0x38>)
1a000a62:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a000a66:	4770      	bx	lr
1a000a68:	40052000 	.word	0x40052000
1a000a6c:	40051000 	.word	0x40051000

1a000a70 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a000a70:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000a74:	d309      	bcc.n	1a000a8a <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a000a76:	4a09      	ldr	r2, [pc, #36]	; (1a000a9c <Chip_Clock_Enable+0x2c>)
1a000a78:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000a7c:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000a80:	f043 0301 	orr.w	r3, r3, #1
1a000a84:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a000a88:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a000a8a:	4a05      	ldr	r2, [pc, #20]	; (1a000aa0 <Chip_Clock_Enable+0x30>)
1a000a8c:	3020      	adds	r0, #32
1a000a8e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000a92:	f043 0301 	orr.w	r3, r3, #1
1a000a96:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a000a9a:	4770      	bx	lr
1a000a9c:	40052000 	.word	0x40052000
1a000aa0:	40051000 	.word	0x40051000

1a000aa4 <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
1a000aa4:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000aa8:	d309      	bcc.n	1a000abe <Chip_Clock_Disable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a000aaa:	4a09      	ldr	r2, [pc, #36]	; (1a000ad0 <Chip_Clock_Disable+0x2c>)
1a000aac:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000ab0:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000ab4:	f023 0301 	bic.w	r3, r3, #1
1a000ab8:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a000abc:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a000abe:	4a05      	ldr	r2, [pc, #20]	; (1a000ad4 <Chip_Clock_Disable+0x30>)
1a000ac0:	3020      	adds	r0, #32
1a000ac2:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000ac6:	f023 0301 	bic.w	r3, r3, #1
1a000aca:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a000ace:	4770      	bx	lr
1a000ad0:	40052000 	.word	0x40052000
1a000ad4:	40051000 	.word	0x40051000

1a000ad8 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a000ad8:	b510      	push	{r4, lr}
1a000ada:	4603      	mov	r3, r0
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a000adc:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000ae0:	d308      	bcc.n	1a000af4 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a000ae2:	f5a0 7291 	sub.w	r2, r0, #290	; 0x122
1a000ae6:	490d      	ldr	r1, [pc, #52]	; (1a000b1c <Chip_Clock_GetRate+0x44>)
1a000ae8:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a000aec:	f014 0001 	ands.w	r0, r4, #1
1a000af0:	d106      	bne.n	1a000b00 <Chip_Clock_GetRate+0x28>
	else {
		rate = 0;
	}

	return rate;
}
1a000af2:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a000af4:	f100 0220 	add.w	r2, r0, #32
1a000af8:	4909      	ldr	r1, [pc, #36]	; (1a000b20 <Chip_Clock_GetRate+0x48>)
1a000afa:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
1a000afe:	e7f5      	b.n	1a000aec <Chip_Clock_GetRate+0x14>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a000b00:	4618      	mov	r0, r3
1a000b02:	f7ff fe09 	bl	1a000718 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a000b06:	f7ff ff8f 	bl	1a000a28 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a000b0a:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a000b0e:	d103      	bne.n	1a000b18 <Chip_Clock_GetRate+0x40>
			div = 1;
1a000b10:	2301      	movs	r3, #1
		rate = rate / div;
1a000b12:	fbb0 f0f3 	udiv	r0, r0, r3
	return rate;
1a000b16:	e7ec      	b.n	1a000af2 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a000b18:	2302      	movs	r3, #2
1a000b1a:	e7fa      	b.n	1a000b12 <Chip_Clock_GetRate+0x3a>
1a000b1c:	40052000 	.word	0x40052000
1a000b20:	40051000 	.word	0x40051000

1a000b24 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000b24:	4b03      	ldr	r3, [pc, #12]	; (1a000b34 <Chip_SSP_GetClockIndex+0x10>)
1a000b26:	4298      	cmp	r0, r3
1a000b28:	d001      	beq.n	1a000b2e <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a000b2a:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a000b2c:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a000b2e:	20a5      	movs	r0, #165	; 0xa5
1a000b30:	4770      	bx	lr
1a000b32:	bf00      	nop
1a000b34:	400c5000 	.word	0x400c5000

1a000b38 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000b38:	4b04      	ldr	r3, [pc, #16]	; (1a000b4c <Chip_SSP_GetPeriphClockIndex+0x14>)
1a000b3a:	4298      	cmp	r0, r3
1a000b3c:	d002      	beq.n	1a000b44 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a000b3e:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a000b42:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a000b44:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a000b48:	4770      	bx	lr
1a000b4a:	bf00      	nop
1a000b4c:	400c5000 	.word	0x400c5000

1a000b50 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a000b50:	6803      	ldr	r3, [r0, #0]
1a000b52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a000b56:	0209      	lsls	r1, r1, #8
1a000b58:	b289      	uxth	r1, r1
1a000b5a:	4319      	orrs	r1, r3
1a000b5c:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a000b5e:	6102      	str	r2, [r0, #16]
}
1a000b60:	4770      	bx	lr

1a000b62 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a000b62:	b570      	push	{r4, r5, r6, lr}
1a000b64:	4606      	mov	r6, r0
1a000b66:	460c      	mov	r4, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a000b68:	f7ff ffe6 	bl	1a000b38 <Chip_SSP_GetPeriphClockIndex>
1a000b6c:	f7ff ffb4 	bl	1a000ad8 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a000b70:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a000b72:	f04f 33ff 	mov.w	r3, #4294967295
	cr0_div = 0;
1a000b76:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a000b78:	e000      	b.n	1a000b7c <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a000b7a:	4629      	mov	r1, r5
	while (cmp_clk > bitRate) {
1a000b7c:	42a3      	cmp	r3, r4
1a000b7e:	d90b      	bls.n	1a000b98 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a000b80:	1c4d      	adds	r5, r1, #1
1a000b82:	fb01 2302 	mla	r3, r1, r2, r2
1a000b86:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a000b8a:	429c      	cmp	r4, r3
1a000b8c:	d2f6      	bcs.n	1a000b7c <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a000b8e:	2dff      	cmp	r5, #255	; 0xff
1a000b90:	d9f3      	bls.n	1a000b7a <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a000b92:	3202      	adds	r2, #2
				cr0_div = 0;
1a000b94:	2100      	movs	r1, #0
1a000b96:	e7f1      	b.n	1a000b7c <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a000b98:	4630      	mov	r0, r6
1a000b9a:	f7ff ffd9 	bl	1a000b50 <Chip_SSP_SetClockRate>
}
1a000b9e:	bd70      	pop	{r4, r5, r6, pc}

1a000ba0 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a000ba0:	b510      	push	{r4, lr}
1a000ba2:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a000ba4:	f7ff ffbe 	bl	1a000b24 <Chip_SSP_GetClockIndex>
1a000ba8:	f7ff ff62 	bl	1a000a70 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a000bac:	4620      	mov	r0, r4
1a000bae:	f7ff ffc3 	bl	1a000b38 <Chip_SSP_GetPeriphClockIndex>
1a000bb2:	f7ff ff5d 	bl	1a000a70 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000bb6:	6863      	ldr	r3, [r4, #4]
1a000bb8:	f023 0304 	bic.w	r3, r3, #4
1a000bbc:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000bbe:	6823      	ldr	r3, [r4, #0]
1a000bc0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000bc4:	f043 0307 	orr.w	r3, r3, #7
1a000bc8:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a000bca:	4902      	ldr	r1, [pc, #8]	; (1a000bd4 <Chip_SSP_Init+0x34>)
1a000bcc:	4620      	mov	r0, r4
1a000bce:	f7ff ffc8 	bl	1a000b62 <Chip_SSP_SetBitRate>
}
1a000bd2:	bd10      	pop	{r4, pc}
1a000bd4:	000186a0 	.word	0x000186a0

1a000bd8 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000bd8:	4b09      	ldr	r3, [pc, #36]	; (1a000c00 <Chip_UART_GetIndex+0x28>)
1a000bda:	4298      	cmp	r0, r3
1a000bdc:	d00b      	beq.n	1a000bf6 <Chip_UART_GetIndex+0x1e>
1a000bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000be2:	4298      	cmp	r0, r3
1a000be4:	d009      	beq.n	1a000bfa <Chip_UART_GetIndex+0x22>
1a000be6:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000bea:	4298      	cmp	r0, r3
1a000bec:	d001      	beq.n	1a000bf2 <Chip_UART_GetIndex+0x1a>
1a000bee:	2000      	movs	r0, #0
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a000bf0:	4770      	bx	lr
			return 1;
1a000bf2:	2001      	movs	r0, #1
1a000bf4:	4770      	bx	lr
			return 2;
1a000bf6:	2002      	movs	r0, #2
1a000bf8:	4770      	bx	lr
			return 3;
1a000bfa:	2003      	movs	r0, #3
1a000bfc:	4770      	bx	lr
1a000bfe:	bf00      	nop
1a000c00:	400c1000 	.word	0x400c1000

1a000c04 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000c04:	b530      	push	{r4, r5, lr}
1a000c06:	b083      	sub	sp, #12
1a000c08:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000c0a:	f7ff ffe5 	bl	1a000bd8 <Chip_UART_GetIndex>
1a000c0e:	2301      	movs	r3, #1
1a000c10:	461a      	mov	r2, r3
1a000c12:	4619      	mov	r1, r3
1a000c14:	4d0e      	ldr	r5, [pc, #56]	; (1a000c50 <Chip_UART_Init+0x4c>)
1a000c16:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000c1a:	f7ff ff0b 	bl	1a000a34 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a000c1e:	2307      	movs	r3, #7
1a000c20:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a000c22:	2300      	movs	r3, #0
1a000c24:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000c26:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000c28:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000c2a:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000c2c:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a000c2e:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a000c30:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000c32:	4b08      	ldr	r3, [pc, #32]	; (1a000c54 <Chip_UART_Init+0x50>)
1a000c34:	429c      	cmp	r4, r3
1a000c36:	d006      	beq.n	1a000c46 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a000c38:	2303      	movs	r3, #3
1a000c3a:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000c3c:	2310      	movs	r3, #16
1a000c3e:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a000c40:	9b01      	ldr	r3, [sp, #4]
}
1a000c42:	b003      	add	sp, #12
1a000c44:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a000c46:	2300      	movs	r3, #0
1a000c48:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a000c4a:	69a3      	ldr	r3, [r4, #24]
1a000c4c:	9301      	str	r3, [sp, #4]
1a000c4e:	e7f3      	b.n	1a000c38 <Chip_UART_Init+0x34>
1a000c50:	1a001c9c 	.word	0x1a001c9c
1a000c54:	40082000 	.word	0x40082000

1a000c58 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a000c58:	b538      	push	{r3, r4, r5, lr}
1a000c5a:	4605      	mov	r5, r0
1a000c5c:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000c5e:	f7ff ffbb 	bl	1a000bd8 <Chip_UART_GetIndex>
1a000c62:	4b0c      	ldr	r3, [pc, #48]	; (1a000c94 <Chip_UART_SetBaud+0x3c>)
1a000c64:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000c68:	f7ff ff36 	bl	1a000ad8 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a000c6c:	0121      	lsls	r1, r4, #4
1a000c6e:	fbb0 f1f1 	udiv	r1, r0, r1

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a000c72:	b2ca      	uxtb	r2, r1
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000c74:	68eb      	ldr	r3, [r5, #12]
1a000c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000c7a:	60eb      	str	r3, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a000c7c:	602a      	str	r2, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a000c7e:	f3c1 2307 	ubfx	r3, r1, #8, #8
1a000c82:	606b      	str	r3, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000c84:	68eb      	ldr	r3, [r5, #12]
1a000c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000c8a:	60eb      	str	r3, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a000c8c:	fbb0 f0f1 	udiv	r0, r0, r1
}
1a000c90:	0900      	lsrs	r0, r0, #4
1a000c92:	bd38      	pop	{r3, r4, r5, pc}
1a000c94:	1a001c94 	.word	0x1a001c94

1a000c98 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000c9c:	b083      	sub	sp, #12
1a000c9e:	9001      	str	r0, [sp, #4]
1a000ca0:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000ca2:	f7ff ff99 	bl	1a000bd8 <Chip_UART_GetIndex>
1a000ca6:	4b32      	ldr	r3, [pc, #200]	; (1a000d70 <Chip_UART_SetBaudFDR+0xd8>)
1a000ca8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000cac:	f7ff ff14 	bl	1a000ad8 <Chip_Clock_GetRate>
1a000cb0:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a000cb2:	f04f 37ff 	mov.w	r7, #4294967295

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000cb6:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000cb8:	f04f 0b00 	mov.w	fp, #0
1a000cbc:	46a2      	mov	sl, r4
1a000cbe:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a000cc0:	e02a      	b.n	1a000d18 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a000cc2:	4242      	negs	r2, r0
				div ++;
1a000cc4:	1c4b      	adds	r3, r1, #1
1a000cc6:	e017      	b.n	1a000cf8 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000cc8:	b30a      	cbz	r2, 1a000d0e <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a000cca:	4617      	mov	r7, r2
			sd = d;
1a000ccc:	46ab      	mov	fp, r5
			sm = m;
1a000cce:	46a2      	mov	sl, r4
			sdiv = div;
1a000cd0:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a000cd2:	3501      	adds	r5, #1
1a000cd4:	42ac      	cmp	r4, r5
1a000cd6:	d91e      	bls.n	1a000d16 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000cd8:	0933      	lsrs	r3, r6, #4
1a000cda:	0730      	lsls	r0, r6, #28
1a000cdc:	fba4 0100 	umull	r0, r1, r4, r0
1a000ce0:	fb04 1103 	mla	r1, r4, r3, r1
1a000ce4:	1962      	adds	r2, r4, r5
1a000ce6:	fb08 f202 	mul.w	r2, r8, r2
1a000cea:	2300      	movs	r3, #0
1a000cec:	f000 fd9c 	bl	1a001828 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a000cf0:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a000cf2:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a000cf4:	2800      	cmp	r0, #0
1a000cf6:	dbe4      	blt.n	1a000cc2 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000cf8:	4297      	cmp	r7, r2
1a000cfa:	d3ea      	bcc.n	1a000cd2 <Chip_UART_SetBaudFDR+0x3a>
1a000cfc:	2b00      	cmp	r3, #0
1a000cfe:	d0e8      	beq.n	1a000cd2 <Chip_UART_SetBaudFDR+0x3a>
1a000d00:	0c19      	lsrs	r1, r3, #16
1a000d02:	d1e6      	bne.n	1a000cd2 <Chip_UART_SetBaudFDR+0x3a>
1a000d04:	2b02      	cmp	r3, #2
1a000d06:	d8df      	bhi.n	1a000cc8 <Chip_UART_SetBaudFDR+0x30>
1a000d08:	2d00      	cmp	r5, #0
1a000d0a:	d0dd      	beq.n	1a000cc8 <Chip_UART_SetBaudFDR+0x30>
1a000d0c:	e7e1      	b.n	1a000cd2 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a000d0e:	4617      	mov	r7, r2
			sd = d;
1a000d10:	46ab      	mov	fp, r5
			sm = m;
1a000d12:	46a2      	mov	sl, r4
			sdiv = div;
1a000d14:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000d16:	3401      	adds	r4, #1
1a000d18:	b11f      	cbz	r7, 1a000d22 <Chip_UART_SetBaudFDR+0x8a>
1a000d1a:	2c0f      	cmp	r4, #15
1a000d1c:	d801      	bhi.n	1a000d22 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a000d1e:	2500      	movs	r5, #0
1a000d20:	e7d8      	b.n	1a000cd4 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a000d22:	f1b9 0f00 	cmp.w	r9, #0
1a000d26:	d01e      	beq.n	1a000d66 <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000d28:	9a01      	ldr	r2, [sp, #4]
1a000d2a:	4611      	mov	r1, r2
1a000d2c:	68d3      	ldr	r3, [r2, #12]
1a000d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000d32:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a000d34:	fa5f f389 	uxtb.w	r3, r9
1a000d38:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a000d3a:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a000d3e:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000d40:	68d3      	ldr	r3, [r2, #12]
1a000d42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000d46:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000d48:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000d4c:	b2db      	uxtb	r3, r3
1a000d4e:	f00b 020f 	and.w	r2, fp, #15
1a000d52:	4313      	orrs	r3, r2
1a000d54:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000d56:	0933      	lsrs	r3, r6, #4
1a000d58:	fb0a f303 	mul.w	r3, sl, r3
1a000d5c:	44da      	add	sl, fp
1a000d5e:	fb09 f90a 	mul.w	r9, r9, sl
1a000d62:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000d66:	4648      	mov	r0, r9
1a000d68:	b003      	add	sp, #12
1a000d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000d6e:	bf00      	nop
1a000d70:	1a001c94 	.word	0x1a001c94

1a000d74 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000d74:	2901      	cmp	r1, #1
1a000d76:	d109      	bne.n	1a000d8c <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a000d78:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000d7c:	4b04      	ldr	r3, [pc, #16]	; (1a000d90 <Chip_I2C_EventHandler+0x1c>)
1a000d7e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
1a000d82:	6902      	ldr	r2, [r0, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a000d84:	7d13      	ldrb	r3, [r2, #20]
1a000d86:	b2db      	uxtb	r3, r3
1a000d88:	2b04      	cmp	r3, #4
1a000d8a:	d0fb      	beq.n	1a000d84 <Chip_I2C_EventHandler+0x10>
}
1a000d8c:	4770      	bx	lr
1a000d8e:	bf00      	nop
1a000d90:	10000000 	.word	0x10000000

1a000d94 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000d94:	b570      	push	{r4, r5, r6, lr}
1a000d96:	4604      	mov	r4, r0
	Chip_Clock_Enable(i2c[id].clk);
1a000d98:	4e07      	ldr	r6, [pc, #28]	; (1a000db8 <Chip_I2C_Init+0x24>)
1a000d9a:	00c5      	lsls	r5, r0, #3
1a000d9c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a000da0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
1a000da4:	8898      	ldrh	r0, [r3, #4]
1a000da6:	f7ff fe63 	bl	1a000a70 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000daa:	1b2c      	subs	r4, r5, r4
1a000dac:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
1a000db0:	226c      	movs	r2, #108	; 0x6c
1a000db2:	619a      	str	r2, [r3, #24]
}
1a000db4:	bd70      	pop	{r4, r5, r6, pc}
1a000db6:	bf00      	nop
1a000db8:	10000000 	.word	0x10000000

1a000dbc <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000dc0:	4604      	mov	r4, r0
1a000dc2:	4688      	mov	r8, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a000dc4:	4d0b      	ldr	r5, [pc, #44]	; (1a000df4 <Chip_I2C_SetClockRate+0x38>)
1a000dc6:	00c6      	lsls	r6, r0, #3
1a000dc8:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a000dcc:	009f      	lsls	r7, r3, #2
1a000dce:	eb05 0383 	add.w	r3, r5, r3, lsl #2
1a000dd2:	8898      	ldrh	r0, [r3, #4]
1a000dd4:	f7ff fe80 	bl	1a000ad8 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a000dd8:	fbb0 f1f8 	udiv	r1, r0, r8
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000ddc:	59eb      	ldr	r3, [r5, r7]
1a000dde:	084a      	lsrs	r2, r1, #1
1a000de0:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a000de2:	1b34      	subs	r4, r6, r4
1a000de4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
1a000de8:	6918      	ldr	r0, [r3, #16]
1a000dea:	1a09      	subs	r1, r1, r0
1a000dec:	6159      	str	r1, [r3, #20]
}
1a000dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000df2:	bf00      	nop
1a000df4:	10000000 	.word	0x10000000

1a000df8 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000df8:	4b03      	ldr	r3, [pc, #12]	; (1a000e08 <Chip_ADC_GetClockIndex+0x10>)
1a000dfa:	4298      	cmp	r0, r3
1a000dfc:	d001      	beq.n	1a000e02 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000dfe:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000e00:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000e02:	2004      	movs	r0, #4
1a000e04:	4770      	bx	lr
1a000e06:	bf00      	nop
1a000e08:	400e4000 	.word	0x400e4000

1a000e0c <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000e0c:	b570      	push	{r4, r5, r6, lr}
1a000e0e:	460d      	mov	r5, r1
1a000e10:	4614      	mov	r4, r2
1a000e12:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000e14:	f7ff fff0 	bl	1a000df8 <Chip_ADC_GetClockIndex>
1a000e18:	f7ff fe5e 	bl	1a000ad8 <Chip_Clock_GetRate>
	if (burstMode) {
1a000e1c:	b155      	cbz	r5, 1a000e34 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a000e1e:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000e22:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000e26:	0064      	lsls	r4, r4, #1
1a000e28:	fbb0 f0f4 	udiv	r0, r0, r4
1a000e2c:	b2c0      	uxtb	r0, r0
1a000e2e:	3801      	subs	r0, #1
	return div;
}
1a000e30:	b2c0      	uxtb	r0, r0
1a000e32:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a000e34:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000e38:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a000e3c:	e7f1      	b.n	1a000e22 <getClkDiv+0x16>

1a000e3e <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
1a000e3e:	6803      	ldr	r3, [r0, #0]
1a000e40:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a000e44:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a000e48:	6003      	str	r3, [r0, #0]
}
1a000e4a:	4770      	bx	lr

1a000e4c <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000e4c:	b538      	push	{r3, r4, r5, lr}
1a000e4e:	4605      	mov	r5, r0
1a000e50:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000e52:	f7ff ffd1 	bl	1a000df8 <Chip_ADC_GetClockIndex>
1a000e56:	2301      	movs	r3, #1
1a000e58:	461a      	mov	r2, r3
1a000e5a:	4619      	mov	r1, r3
1a000e5c:	f7ff fdea 	bl	1a000a34 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000e60:	2100      	movs	r1, #0
1a000e62:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000e64:	4a08      	ldr	r2, [pc, #32]	; (1a000e88 <Chip_ADC_Init+0x3c>)
1a000e66:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000e68:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000e6a:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000e6c:	230b      	movs	r3, #11
1a000e6e:	4628      	mov	r0, r5
1a000e70:	f7ff ffcc 	bl	1a000e0c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000e74:	0200      	lsls	r0, r0, #8
1a000e76:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000e7a:	7923      	ldrb	r3, [r4, #4]
1a000e7c:	045b      	lsls	r3, r3, #17
1a000e7e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000e82:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a000e84:	602b      	str	r3, [r5, #0]
}
1a000e86:	bd38      	pop	{r3, r4, r5, pc}
1a000e88:	00061a80 	.word	0x00061a80

1a000e8c <Chip_ADC_Int_SetChannelCmd>:
}

/* Enable/Disable interrupt for ADC channel */
void Chip_ADC_Int_SetChannelCmd(LPC_ADC_T *pADC, uint8_t channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a000e8c:	2a01      	cmp	r2, #1
1a000e8e:	d007      	beq.n	1a000ea0 <Chip_ADC_Int_SetChannelCmd+0x14>
		pADC->INTEN |= (1UL << channel);
	}
	else {
		pADC->INTEN &= (~(1UL << channel));
1a000e90:	68c3      	ldr	r3, [r0, #12]
1a000e92:	2201      	movs	r2, #1
1a000e94:	fa02 f101 	lsl.w	r1, r2, r1
1a000e98:	ea23 0101 	bic.w	r1, r3, r1
1a000e9c:	60c1      	str	r1, [r0, #12]
	}
}
1a000e9e:	4770      	bx	lr
		pADC->INTEN |= (1UL << channel);
1a000ea0:	68c3      	ldr	r3, [r0, #12]
1a000ea2:	fa02 f101 	lsl.w	r1, r2, r1
1a000ea6:	4319      	orrs	r1, r3
1a000ea8:	60c1      	str	r1, [r0, #12]
1a000eaa:	4770      	bx	lr

1a000eac <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000eac:	b570      	push	{r4, r5, r6, lr}
1a000eae:	4605      	mov	r5, r0
1a000eb0:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000eb2:	6804      	ldr	r4, [r0, #0]
1a000eb4:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000eb8:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000ebc:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000ebe:	790b      	ldrb	r3, [r1, #4]
1a000ec0:	f1c3 030b 	rsb	r3, r3, #11
1a000ec4:	b2db      	uxtb	r3, r3
1a000ec6:	7949      	ldrb	r1, [r1, #5]
1a000ec8:	f7ff ffa0 	bl	1a000e0c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000ecc:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000ed0:	7933      	ldrb	r3, [r6, #4]
1a000ed2:	045b      	lsls	r3, r3, #17
1a000ed4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000ed8:	4323      	orrs	r3, r4
	pADC->CR = cr;
1a000eda:	602b      	str	r3, [r5, #0]
}
1a000edc:	bd70      	pop	{r4, r5, r6, pc}

1a000ede <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000ede:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000ee0:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000ee2:	680a      	ldr	r2, [r1, #0]
1a000ee4:	f7ff ffe2 	bl	1a000eac <Chip_ADC_SetSampleRate>
}
1a000ee8:	bd08      	pop	{r3, pc}

1a000eea <Chip_ADC_EnableChannel>:

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a000eea:	2a01      	cmp	r2, #1
1a000eec:	d00b      	beq.n	1a000f06 <Chip_ADC_EnableChannel+0x1c>
		pADC->CR |= ADC_CR_CH_SEL(channel);
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
1a000eee:	6803      	ldr	r3, [r0, #0]
1a000ef0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
1a000ef4:	6003      	str	r3, [r0, #0]
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a000ef6:	6803      	ldr	r3, [r0, #0]
1a000ef8:	2201      	movs	r2, #1
1a000efa:	fa02 f101 	lsl.w	r1, r2, r1
1a000efe:	ea23 0101 	bic.w	r1, r3, r1
1a000f02:	6001      	str	r1, [r0, #0]
	}
}
1a000f04:	4770      	bx	lr
		pADC->CR |= ADC_CR_CH_SEL(channel);
1a000f06:	6803      	ldr	r3, [r0, #0]
1a000f08:	fa02 f101 	lsl.w	r1, r2, r1
1a000f0c:	4319      	orrs	r1, r3
1a000f0e:	6001      	str	r1, [r0, #0]
1a000f10:	4770      	bx	lr

1a000f12 <Chip_ADC_SetBurstCmd>:

/* Enable burst mode */
void Chip_ADC_SetBurstCmd(LPC_ADC_T *pADC, FunctionalState NewState)
{
1a000f12:	b538      	push	{r3, r4, r5, lr}
1a000f14:	4604      	mov	r4, r0
1a000f16:	460d      	mov	r5, r1
	setStartMode(pADC, ADC_NO_START);
1a000f18:	2100      	movs	r1, #0
1a000f1a:	f7ff ff90 	bl	1a000e3e <setStartMode>
	
    if (NewState == DISABLE) {
1a000f1e:	b925      	cbnz	r5, 1a000f2a <Chip_ADC_SetBurstCmd+0x18>
		pADC->CR &= ~ADC_CR_BURST;
1a000f20:	6823      	ldr	r3, [r4, #0]
1a000f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a000f26:	6023      	str	r3, [r4, #0]
	}
	else {
		pADC->CR |= ADC_CR_BURST;
	}
}
1a000f28:	bd38      	pop	{r3, r4, r5, pc}
		pADC->CR |= ADC_CR_BURST;
1a000f2a:	6823      	ldr	r3, [r4, #0]
1a000f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a000f30:	6023      	str	r3, [r4, #0]
}
1a000f32:	e7f9      	b.n	1a000f28 <Chip_ADC_SetBurstCmd+0x16>

1a000f34 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000f34:	b570      	push	{r4, r5, r6, lr}
1a000f36:	b08a      	sub	sp, #40	; 0x28
1a000f38:	4605      	mov	r5, r0
1a000f3a:	460e      	mov	r6, r1
1a000f3c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a000f3e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000f42:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a000f44:	2806      	cmp	r0, #6
1a000f46:	d018      	beq.n	1a000f7a <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000f48:	2300      	movs	r3, #0
1a000f4a:	2201      	movs	r2, #1
1a000f4c:	4629      	mov	r1, r5
1a000f4e:	2004      	movs	r0, #4
1a000f50:	f7ff fd2a 	bl	1a0009a8 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a000f54:	4a4a      	ldr	r2, [pc, #296]	; (1a001080 <Chip_SetupCoreClock+0x14c>)
1a000f56:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000f58:	f043 0301 	orr.w	r3, r3, #1
1a000f5c:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a000f5e:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000f62:	a901      	add	r1, sp, #4
1a000f64:	4630      	mov	r0, r6
1a000f66:	f7ff fc99 	bl	1a00089c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a000f6a:	4b46      	ldr	r3, [pc, #280]	; (1a001084 <Chip_SetupCoreClock+0x150>)
1a000f6c:	429e      	cmp	r6, r3
1a000f6e:	d916      	bls.n	1a000f9e <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a000f70:	9b01      	ldr	r3, [sp, #4]
1a000f72:	f013 0f40 	tst.w	r3, #64	; 0x40
1a000f76:	d003      	beq.n	1a000f80 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a000f78:	e7fe      	b.n	1a000f78 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a000f7a:	f7ff fbf1 	bl	1a000760 <Chip_Clock_EnableCrystal>
1a000f7e:	e7e3      	b.n	1a000f48 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a000f80:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000f84:	d005      	beq.n	1a000f92 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a000f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000f8a:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a000f8c:	2500      	movs	r5, #0
			direct = 1;
1a000f8e:	2601      	movs	r6, #1
1a000f90:	e007      	b.n	1a000fa2 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a000f92:	9b04      	ldr	r3, [sp, #16]
1a000f94:	3301      	adds	r3, #1
1a000f96:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a000f98:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a000f9a:	2600      	movs	r6, #0
1a000f9c:	e001      	b.n	1a000fa2 <Chip_SetupCoreClock+0x6e>
1a000f9e:	2500      	movs	r5, #0
1a000fa0:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000fa2:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000fa6:	9b01      	ldr	r3, [sp, #4]
1a000fa8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000fac:	9a05      	ldr	r2, [sp, #20]
1a000fae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000fb2:	9a03      	ldr	r2, [sp, #12]
1a000fb4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000fb8:	9a04      	ldr	r2, [sp, #16]
1a000fba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000fbe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000fc2:	4a2f      	ldr	r2, [pc, #188]	; (1a001080 <Chip_SetupCoreClock+0x14c>)
1a000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000fc6:	4b2e      	ldr	r3, [pc, #184]	; (1a001080 <Chip_SetupCoreClock+0x14c>)
1a000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a000fca:	f013 0f01 	tst.w	r3, #1
1a000fce:	d0fa      	beq.n	1a000fc6 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000fd0:	2300      	movs	r3, #0
1a000fd2:	2201      	movs	r2, #1
1a000fd4:	2109      	movs	r1, #9
1a000fd6:	2004      	movs	r0, #4
1a000fd8:	f7ff fce6 	bl	1a0009a8 <Chip_Clock_SetBaseClock>

	if (direct) {
1a000fdc:	b306      	cbz	r6, 1a001020 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000fde:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000fe2:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a000fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000fe6:	1e5a      	subs	r2, r3, #1
1a000fe8:	9209      	str	r2, [sp, #36]	; 0x24
1a000fea:	2b00      	cmp	r3, #0
1a000fec:	d1fa      	bne.n	1a000fe4 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a000fee:	9b01      	ldr	r3, [sp, #4]
1a000ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000ff4:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000ff6:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000ffa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000ffe:	9a05      	ldr	r2, [sp, #20]
1a001000:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001004:	9a03      	ldr	r2, [sp, #12]
1a001006:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00100a:	9a04      	ldr	r2, [sp, #16]
1a00100c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001010:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001014:	4a1a      	ldr	r2, [pc, #104]	; (1a001080 <Chip_SetupCoreClock+0x14c>)
1a001016:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001018:	2c00      	cmp	r4, #0
1a00101a:	d12e      	bne.n	1a00107a <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a00101c:	b00a      	add	sp, #40	; 0x28
1a00101e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a001020:	2d00      	cmp	r5, #0
1a001022:	d0f9      	beq.n	1a001018 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001024:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001028:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a00102a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00102c:	1e5a      	subs	r2, r3, #1
1a00102e:	9209      	str	r2, [sp, #36]	; 0x24
1a001030:	2b00      	cmp	r3, #0
1a001032:	d1fa      	bne.n	1a00102a <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a001034:	9b04      	ldr	r3, [sp, #16]
1a001036:	1e5a      	subs	r2, r3, #1
1a001038:	9204      	str	r2, [sp, #16]
1a00103a:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a00103e:	9b01      	ldr	r3, [sp, #4]
1a001040:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a001044:	9905      	ldr	r1, [sp, #20]
1a001046:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00104a:	9903      	ldr	r1, [sp, #12]
1a00104c:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001050:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001054:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001058:	4a09      	ldr	r2, [pc, #36]	; (1a001080 <Chip_SetupCoreClock+0x14c>)
1a00105a:	6453      	str	r3, [r2, #68]	; 0x44
}
1a00105c:	e7dc      	b.n	1a001018 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00105e:	480a      	ldr	r0, [pc, #40]	; (1a001088 <Chip_SetupCoreClock+0x154>)
1a001060:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001064:	78cb      	ldrb	r3, [r1, #3]
1a001066:	788a      	ldrb	r2, [r1, #2]
1a001068:	7849      	ldrb	r1, [r1, #1]
1a00106a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00106e:	f7ff fc9b 	bl	1a0009a8 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001072:	3401      	adds	r4, #1
1a001074:	2c11      	cmp	r4, #17
1a001076:	d9f2      	bls.n	1a00105e <Chip_SetupCoreClock+0x12a>
1a001078:	e7d0      	b.n	1a00101c <Chip_SetupCoreClock+0xe8>
1a00107a:	2400      	movs	r4, #0
1a00107c:	e7fa      	b.n	1a001074 <Chip_SetupCoreClock+0x140>
1a00107e:	bf00      	nop
1a001080:	40050000 	.word	0x40050000
1a001084:	068e7780 	.word	0x068e7780
1a001088:	1a001ca4 	.word	0x1a001ca4

1a00108c <Chip_DAC_DeInit>:
	Chip_DAC_SetBias(pDAC, DAC_MAX_UPDATE_RATE_1MHz);
}

/* Shutdown DAC peripheral */
void Chip_DAC_DeInit(LPC_DAC_T *pDAC)
{
1a00108c:	b508      	push	{r3, lr}
	Chip_Clock_Disable(CLK_APB3_DAC);
1a00108e:	2002      	movs	r0, #2
1a001090:	f7ff fd08 	bl	1a000aa4 <Chip_Clock_Disable>
}
1a001094:	bd08      	pop	{r3, pc}

1a001096 <Chip_DAC_UpdateValue>:
/* Update value to DAC buffer*/
void Chip_DAC_UpdateValue(LPC_DAC_T *pDAC, uint32_t dac_value)
{
	uint32_t tmp;

	tmp = pDAC->CR & DAC_BIAS_EN;
1a001096:	6803      	ldr	r3, [r0, #0]
1a001098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
	tmp |= DAC_VALUE(dac_value);
1a00109c:	0189      	lsls	r1, r1, #6
1a00109e:	b289      	uxth	r1, r1
1a0010a0:	4319      	orrs	r1, r3
	/* Update value */
	pDAC->CR = tmp;
1a0010a2:	6001      	str	r1, [r0, #0]
}
1a0010a4:	4770      	bx	lr

1a0010a6 <Chip_DAC_SetBias>:

/* Set Maximum update rate for DAC */
void Chip_DAC_SetBias(LPC_DAC_T *pDAC, uint32_t bias)
{
	pDAC->CR &= ~DAC_BIAS_EN;
1a0010a6:	6803      	ldr	r3, [r0, #0]
1a0010a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a0010ac:	6003      	str	r3, [r0, #0]

	if (bias  == DAC_MAX_UPDATE_RATE_400kHz) {
1a0010ae:	2901      	cmp	r1, #1
1a0010b0:	d000      	beq.n	1a0010b4 <Chip_DAC_SetBias+0xe>
		pDAC->CR |= DAC_BIAS_EN;
	}
}
1a0010b2:	4770      	bx	lr
		pDAC->CR |= DAC_BIAS_EN;
1a0010b4:	6803      	ldr	r3, [r0, #0]
1a0010b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a0010ba:	6003      	str	r3, [r0, #0]
}
1a0010bc:	e7f9      	b.n	1a0010b2 <Chip_DAC_SetBias+0xc>
1a0010be:	Address 0x1a0010be is out of bounds.


1a0010c0 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0010c0:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0010c2:	4a0b      	ldr	r2, [pc, #44]	; (1a0010f0 <SystemInit+0x30>)
1a0010c4:	4b0b      	ldr	r3, [pc, #44]	; (1a0010f4 <SystemInit+0x34>)
1a0010c6:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0010c8:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0010cc:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0010ce:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0010d2:	2b20      	cmp	r3, #32
1a0010d4:	d004      	beq.n	1a0010e0 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a0010d6:	f7ff f965 	bl	1a0003a4 <Board_SystemInit>
   Board_Init();
1a0010da:	f7ff fa23 	bl	1a000524 <Board_Init>
}
1a0010de:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0010e0:	4a04      	ldr	r2, [pc, #16]	; (1a0010f4 <SystemInit+0x34>)
1a0010e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0010e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0010ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0010ee:	e7f2      	b.n	1a0010d6 <SystemInit+0x16>
1a0010f0:	1a000000 	.word	0x1a000000
1a0010f4:	e000ed00 	.word	0xe000ed00

1a0010f8 <initialise_monitor_handles>:
}
1a0010f8:	4770      	bx	lr
1a0010fa:	Address 0x1a0010fa is out of bounds.


1a0010fc <Reset_Handler>:
void Reset_Handler(void) {
1a0010fc:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0010fe:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a001100:	4b19      	ldr	r3, [pc, #100]	; (1a001168 <Reset_Handler+0x6c>)
1a001102:	4a1a      	ldr	r2, [pc, #104]	; (1a00116c <Reset_Handler+0x70>)
1a001104:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a001106:	3304      	adds	r3, #4
1a001108:	4a19      	ldr	r2, [pc, #100]	; (1a001170 <Reset_Handler+0x74>)
1a00110a:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00110c:	2300      	movs	r3, #0
1a00110e:	e005      	b.n	1a00111c <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a001110:	4a18      	ldr	r2, [pc, #96]	; (1a001174 <Reset_Handler+0x78>)
1a001112:	f04f 31ff 	mov.w	r1, #4294967295
1a001116:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00111a:	3301      	adds	r3, #1
1a00111c:	2b07      	cmp	r3, #7
1a00111e:	d9f7      	bls.n	1a001110 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a001120:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a001122:	4b15      	ldr	r3, [pc, #84]	; (1a001178 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a001124:	e007      	b.n	1a001136 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a001126:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00112a:	689a      	ldr	r2, [r3, #8]
1a00112c:	6859      	ldr	r1, [r3, #4]
1a00112e:	6818      	ldr	r0, [r3, #0]
1a001130:	f7ff f82c 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a001134:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a001136:	4a11      	ldr	r2, [pc, #68]	; (1a00117c <Reset_Handler+0x80>)
1a001138:	4293      	cmp	r3, r2
1a00113a:	d3f4      	bcc.n	1a001126 <Reset_Handler+0x2a>
1a00113c:	e006      	b.n	1a00114c <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a00113e:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a001140:	6859      	ldr	r1, [r3, #4]
1a001142:	f854 0b08 	ldr.w	r0, [r4], #8
1a001146:	f7ff f830 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a00114a:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a00114c:	4a0c      	ldr	r2, [pc, #48]	; (1a001180 <Reset_Handler+0x84>)
1a00114e:	4293      	cmp	r3, r2
1a001150:	d3f5      	bcc.n	1a00113e <Reset_Handler+0x42>
    SystemInit();
1a001152:	f7ff ffb5 	bl	1a0010c0 <SystemInit>
    __libc_init_array();
1a001156:	f000 fce3 	bl	1a001b20 <__libc_init_array>
    initialise_monitor_handles();
1a00115a:	f7ff ffcd 	bl	1a0010f8 <initialise_monitor_handles>
    main();
1a00115e:	f000 fadf 	bl	1a001720 <main>
        __asm__ volatile("wfi");
1a001162:	bf30      	wfi
    while (1) {
1a001164:	e7fd      	b.n	1a001162 <Reset_Handler+0x66>
1a001166:	bf00      	nop
1a001168:	40053100 	.word	0x40053100
1a00116c:	10df1000 	.word	0x10df1000
1a001170:	01dff7ff 	.word	0x01dff7ff
1a001174:	e000e280 	.word	0xe000e280
1a001178:	1a000114 	.word	0x1a000114
1a00117c:	1a000150 	.word	0x1a000150
1a001180:	1a000178 	.word	0x1a000178

1a001184 <_fini>:
void _fini(void) {}
1a001184:	4770      	bx	lr

1a001186 <_init>:
void _init(void) {}
1a001186:	4770      	bx	lr

1a001188 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001188:	4b04      	ldr	r3, [pc, #16]	; (1a00119c <cyclesCounterInit+0x14>)
1a00118a:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a00118c:	4a04      	ldr	r2, [pc, #16]	; (1a0011a0 <cyclesCounterInit+0x18>)
1a00118e:	6813      	ldr	r3, [r2, #0]
1a001190:	f043 0301 	orr.w	r3, r3, #1
1a001194:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a001196:	2001      	movs	r0, #1
1a001198:	4770      	bx	lr
1a00119a:	bf00      	nop
1a00119c:	10000038 	.word	0x10000038
1a0011a0:	e0001000 	.word	0xe0001000

1a0011a4 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0011a4:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0011a6:	4d0b      	ldr	r5, [pc, #44]	; (1a0011d4 <gpioObtainPinInit+0x30>)
1a0011a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0011ac:	182c      	adds	r4, r5, r0
1a0011ae:	5628      	ldrsb	r0, [r5, r0]
1a0011b0:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0011b2:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0011b6:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0011b8:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0011bc:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0011be:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0011c2:	9b02      	ldr	r3, [sp, #8]
1a0011c4:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0011c6:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0011ca:	9b03      	ldr	r3, [sp, #12]
1a0011cc:	701a      	strb	r2, [r3, #0]
}
1a0011ce:	bc30      	pop	{r4, r5}
1a0011d0:	4770      	bx	lr
1a0011d2:	bf00      	nop
1a0011d4:	1a001cec 	.word	0x1a001cec

1a0011d8 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a0011d8:	b570      	push	{r4, r5, r6, lr}
1a0011da:	b084      	sub	sp, #16
1a0011dc:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0011de:	2300      	movs	r3, #0
1a0011e0:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0011e4:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0011e8:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0011ec:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0011f0:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0011f4:	f10d 030b 	add.w	r3, sp, #11
1a0011f8:	9301      	str	r3, [sp, #4]
1a0011fa:	ab03      	add	r3, sp, #12
1a0011fc:	9300      	str	r3, [sp, #0]
1a0011fe:	f10d 030d 	add.w	r3, sp, #13
1a001202:	f10d 020e 	add.w	r2, sp, #14
1a001206:	f10d 010f 	add.w	r1, sp, #15
1a00120a:	f7ff ffcb 	bl	1a0011a4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00120e:	2c05      	cmp	r4, #5
1a001210:	f200 80a5 	bhi.w	1a00135e <gpioInit+0x186>
1a001214:	e8df f004 	tbb	[pc, r4]
1a001218:	45278109 	.word	0x45278109
1a00121c:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00121e:	4851      	ldr	r0, [pc, #324]	; (1a001364 <gpioInit+0x18c>)
1a001220:	f7ff f998 	bl	1a000554 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001224:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a001226:	b004      	add	sp, #16
1a001228:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00122a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00122e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001232:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001236:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00123a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00123e:	494a      	ldr	r1, [pc, #296]	; (1a001368 <gpioInit+0x190>)
1a001240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001244:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001248:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00124c:	2001      	movs	r0, #1
1a00124e:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a001252:	4c44      	ldr	r4, [pc, #272]	; (1a001364 <gpioInit+0x18c>)
1a001254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001258:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00125c:	ea22 0201 	bic.w	r2, r2, r1
1a001260:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001264:	e7df      	b.n	1a001226 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001266:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00126a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00126e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001272:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001276:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00127a:	493b      	ldr	r1, [pc, #236]	; (1a001368 <gpioInit+0x190>)
1a00127c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001280:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001284:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001288:	2001      	movs	r0, #1
1a00128a:	fa00 f102 	lsl.w	r1, r0, r2
1a00128e:	4c35      	ldr	r4, [pc, #212]	; (1a001364 <gpioInit+0x18c>)
1a001290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001294:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001298:	ea22 0201 	bic.w	r2, r2, r1
1a00129c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0012a0:	e7c1      	b.n	1a001226 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0012a2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0012a6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0012aa:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0012ae:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0012b2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0012b6:	492c      	ldr	r1, [pc, #176]	; (1a001368 <gpioInit+0x190>)
1a0012b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0012bc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0012c0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0012c4:	2001      	movs	r0, #1
1a0012c6:	fa00 f102 	lsl.w	r1, r0, r2
1a0012ca:	4c26      	ldr	r4, [pc, #152]	; (1a001364 <gpioInit+0x18c>)
1a0012cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0012d0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0012d4:	ea22 0201 	bic.w	r2, r2, r1
1a0012d8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0012dc:	e7a3      	b.n	1a001226 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0012de:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0012e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0012e6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0012ea:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0012ee:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0012f2:	491d      	ldr	r1, [pc, #116]	; (1a001368 <gpioInit+0x190>)
1a0012f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0012f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0012fc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001300:	2001      	movs	r0, #1
1a001302:	fa00 f102 	lsl.w	r1, r0, r2
1a001306:	4c17      	ldr	r4, [pc, #92]	; (1a001364 <gpioInit+0x18c>)
1a001308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00130c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001310:	ea22 0201 	bic.w	r2, r2, r1
1a001314:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001318:	e785      	b.n	1a001226 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00131a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00131e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001322:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001326:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00132a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00132e:	490e      	ldr	r1, [pc, #56]	; (1a001368 <gpioInit+0x190>)
1a001330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001334:	f89d 000c 	ldrb.w	r0, [sp, #12]
1a001338:	f99d 100b 	ldrsb.w	r1, [sp, #11]
1a00133c:	2201      	movs	r2, #1
1a00133e:	408a      	lsls	r2, r1
		pGPIO->DIR[portNum] |= bitValue;
1a001340:	4b08      	ldr	r3, [pc, #32]	; (1a001364 <gpioInit+0x18c>)
1a001342:	f500 6500 	add.w	r5, r0, #2048	; 0x800
1a001346:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a00134a:	4332      	orrs	r2, r6
1a00134c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a001350:	b2c9      	uxtb	r1, r1
	pGPIO->B[port][pin] = setting;
1a001352:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001356:	2200      	movs	r2, #0
1a001358:	545a      	strb	r2, [r3, r1]
   bool_t ret_val     = 1;
1a00135a:	4620      	mov	r0, r4
}
1a00135c:	e763      	b.n	1a001226 <gpioInit+0x4e>
   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00135e:	2000      	movs	r0, #0
1a001360:	e761      	b.n	1a001226 <gpioInit+0x4e>
1a001362:	bf00      	nop
1a001364:	400f4000 	.word	0x400f4000
1a001368:	40086000 	.word	0x40086000

1a00136c <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a00136c:	b510      	push	{r4, lr}
1a00136e:	b084      	sub	sp, #16
1a001370:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001372:	2300      	movs	r3, #0
1a001374:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001378:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00137c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001380:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001384:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001388:	f10d 030b 	add.w	r3, sp, #11
1a00138c:	9301      	str	r3, [sp, #4]
1a00138e:	ab03      	add	r3, sp, #12
1a001390:	9300      	str	r3, [sp, #0]
1a001392:	f10d 030d 	add.w	r3, sp, #13
1a001396:	f10d 020e 	add.w	r2, sp, #14
1a00139a:	f10d 010f 	add.w	r1, sp, #15
1a00139e:	f7ff ff01 	bl	1a0011a4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0013a2:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0013a6:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0013aa:	3c00      	subs	r4, #0
1a0013ac:	bf18      	it	ne
1a0013ae:	2401      	movne	r4, #1
	pGPIO->B[port][pin] = setting;
1a0013b0:	015b      	lsls	r3, r3, #5
1a0013b2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0013b6:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0013ba:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a0013bc:	2001      	movs	r0, #1
1a0013be:	b004      	add	sp, #16
1a0013c0:	bd10      	pop	{r4, pc}
1a0013c2:	Address 0x1a0013c2 is out of bounds.


1a0013c4 <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a0013c4:	4b01      	ldr	r3, [pc, #4]	; (1a0013cc <tickRead+0x8>)
1a0013c6:	e9d3 0100 	ldrd	r0, r1, [r3]
1a0013ca:	4770      	bx	lr
1a0013cc:	10000058 	.word	0x10000058

1a0013d0 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a0013d0:	b118      	cbz	r0, 1a0013da <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0013d2:	4b04      	ldr	r3, [pc, #16]	; (1a0013e4 <tickPowerSet+0x14>)
1a0013d4:	2207      	movs	r2, #7
1a0013d6:	601a      	str	r2, [r3, #0]
1a0013d8:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a0013da:	4b02      	ldr	r3, [pc, #8]	; (1a0013e4 <tickPowerSet+0x14>)
1a0013dc:	2200      	movs	r2, #0
1a0013de:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a0013e0:	4770      	bx	lr
1a0013e2:	bf00      	nop
1a0013e4:	e000e010 	.word	0xe000e010

1a0013e8 <tickInit>:
{
1a0013e8:	b538      	push	{r3, r4, r5, lr}
1a0013ea:	4602      	mov	r2, r0
1a0013ec:	460b      	mov	r3, r1
      if( tickRateMSvalue == 0 ) {
1a0013ee:	ea52 0103 	orrs.w	r1, r2, r3
1a0013f2:	d028      	beq.n	1a001446 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a0013f4:	f110 34ff 	adds.w	r4, r0, #4294967295
1a0013f8:	f143 35ff 	adc.w	r5, r3, #4294967295
1a0013fc:	2d00      	cmp	r5, #0
1a0013fe:	bf08      	it	eq
1a001400:	2c32      	cmpeq	r4, #50	; 0x32
1a001402:	d225      	bcs.n	1a001450 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001404:	4913      	ldr	r1, [pc, #76]	; (1a001454 <tickInit+0x6c>)
1a001406:	e9c1 2300 	strd	r2, r3, [r1]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a00140a:	4913      	ldr	r1, [pc, #76]	; (1a001458 <tickInit+0x70>)
1a00140c:	680c      	ldr	r4, [r1, #0]
1a00140e:	fba4 0100 	umull	r0, r1, r4, r0
1a001412:	fb04 1103 	mla	r1, r4, r3, r1
1a001416:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00141a:	2300      	movs	r3, #0
1a00141c:	f000 fa04 	bl	1a001828 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001420:	3801      	subs	r0, #1
1a001422:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a001426:	d209      	bcs.n	1a00143c <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a001428:	4b0c      	ldr	r3, [pc, #48]	; (1a00145c <tickInit+0x74>)
1a00142a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a00142c:	4a0c      	ldr	r2, [pc, #48]	; (1a001460 <tickInit+0x78>)
1a00142e:	21e0      	movs	r1, #224	; 0xe0
1a001430:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a001434:	2200      	movs	r2, #0
1a001436:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001438:	2207      	movs	r2, #7
1a00143a:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a00143c:	2001      	movs	r0, #1
1a00143e:	f7ff ffc7 	bl	1a0013d0 <tickPowerSet>
      bool_t ret_val = 1;
1a001442:	2001      	movs	r0, #1
1a001444:	e005      	b.n	1a001452 <tickInit+0x6a>
         tickPowerSet( OFF );
1a001446:	2000      	movs	r0, #0
1a001448:	f7ff ffc2 	bl	1a0013d0 <tickPowerSet>
         ret_val = 0;
1a00144c:	2000      	movs	r0, #0
1a00144e:	e000      	b.n	1a001452 <tickInit+0x6a>
            ret_val = 0;
1a001450:	2000      	movs	r0, #0
}
1a001452:	bd38      	pop	{r3, r4, r5, pc}
1a001454:	10000040 	.word	0x10000040
1a001458:	1000046c 	.word	0x1000046c
1a00145c:	e000e010 	.word	0xe000e010
1a001460:	e000ed00 	.word	0xe000ed00

1a001464 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001464:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a001466:	4a07      	ldr	r2, [pc, #28]	; (1a001484 <SysTick_Handler+0x20>)
1a001468:	6813      	ldr	r3, [r2, #0]
1a00146a:	6851      	ldr	r1, [r2, #4]
1a00146c:	3301      	adds	r3, #1
1a00146e:	f141 0100 	adc.w	r1, r1, #0
1a001472:	6013      	str	r3, [r2, #0]
1a001474:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a001476:	4b04      	ldr	r3, [pc, #16]	; (1a001488 <SysTick_Handler+0x24>)
1a001478:	681b      	ldr	r3, [r3, #0]
1a00147a:	b113      	cbz	r3, 1a001482 <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a00147c:	4a03      	ldr	r2, [pc, #12]	; (1a00148c <SysTick_Handler+0x28>)
1a00147e:	6810      	ldr	r0, [r2, #0]
1a001480:	4798      	blx	r3
   }
}
1a001482:	bd08      	pop	{r3, pc}
1a001484:	10000058 	.word	0x10000058
1a001488:	10000060 	.word	0x10000060
1a00148c:	10000050 	.word	0x10000050

1a001490 <dacInit>:
 * @brief:  enable/disable the ADC and DAC peripheral
 * @param:  DAC_ENABLE, DAC_DISABLE
 * @return: none
*/
void dacInit( dacInit_t config )
{
1a001490:	b510      	push	{r4, lr}

   switch(config) {
1a001492:	b110      	cbz	r0, 1a00149a <dacInit+0xa>
1a001494:	2801      	cmp	r0, #1
1a001496:	d016      	beq.n	1a0014c6 <dacInit+0x36>
      /* Disable DAC peripheral */
      Chip_DAC_DeInit( LPC_DAC );
      break;
   }

}
1a001498:	bd10      	pop	{r4, pc}
      Chip_Clock_EnableOpts(CLK_APB3_DAC, true, true, 1);
1a00149a:	2301      	movs	r3, #1
1a00149c:	461a      	mov	r2, r3
1a00149e:	4619      	mov	r1, r3
1a0014a0:	2002      	movs	r0, #2
1a0014a2:	f7ff fac7 	bl	1a000a34 <Chip_Clock_EnableOpts>
      Chip_DAC_SetBias(LPC_DAC, DAC_MAX_UPDATE_RATE_400kHz);
1a0014a6:	4c0a      	ldr	r4, [pc, #40]	; (1a0014d0 <dacInit+0x40>)
1a0014a8:	2101      	movs	r1, #1
1a0014aa:	4620      	mov	r0, r4
1a0014ac:	f7ff fdfb 	bl	1a0010a6 <Chip_DAC_SetBias>
 */
STATIC INLINE void Chip_DAC_ConfigDAConverterControl(LPC_DAC_T *pDAC, uint32_t dacFlags)
{
	uint32_t temp;

	temp = pDAC->CTRL & ~DAC_DACCTRL_MASK;
1a0014b0:	6863      	ldr	r3, [r4, #4]
1a0014b2:	f023 030f 	bic.w	r3, r3, #15
	pDAC->CTRL = temp | dacFlags;
1a0014b6:	f043 0308 	orr.w	r3, r3, #8
1a0014ba:	6063      	str	r3, [r4, #4]
      Chip_DAC_UpdateValue(LPC_DAC, 0);
1a0014bc:	2100      	movs	r1, #0
1a0014be:	4620      	mov	r0, r4
1a0014c0:	f7ff fde9 	bl	1a001096 <Chip_DAC_UpdateValue>
      break;
1a0014c4:	e7e8      	b.n	1a001498 <dacInit+0x8>
      Chip_DAC_DeInit( LPC_DAC );
1a0014c6:	4802      	ldr	r0, [pc, #8]	; (1a0014d0 <dacInit+0x40>)
1a0014c8:	f7ff fde0 	bl	1a00108c <Chip_DAC_DeInit>
}
1a0014cc:	e7e4      	b.n	1a001498 <dacInit+0x8>
1a0014ce:	bf00      	nop
1a0014d0:	400e1000 	.word	0x400e1000

1a0014d4 <uartRxReady>:
//-------------------------------------------------------------

// Return TRUE if have unread data in RX FIFO
bool_t uartRxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a0014d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0014d8:	4b03      	ldr	r3, [pc, #12]	; (1a0014e8 <uartRxReady+0x14>)
1a0014da:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0014de:	6958      	ldr	r0, [r3, #20]
}
1a0014e0:	f000 0001 	and.w	r0, r0, #1
1a0014e4:	4770      	bx	lr
1a0014e6:	bf00      	nop
1a0014e8:	1a001dd4 	.word	0x1a001dd4

1a0014ec <uartTxReady>:
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a0014ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0014f0:	4b03      	ldr	r3, [pc, #12]	; (1a001500 <uartTxReady+0x14>)
1a0014f2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
1a0014f6:	6958      	ldr	r0, [r3, #20]
}
1a0014f8:	f000 0020 	and.w	r0, r0, #32
1a0014fc:	4770      	bx	lr
1a0014fe:	bf00      	nop
1a001500:	1a001dd4 	.word	0x1a001dd4

1a001504 <uartRxRead>:
// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a001504:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001508:	4b02      	ldr	r3, [pc, #8]	; (1a001514 <uartRxRead+0x10>)
1a00150a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00150e:	6818      	ldr	r0, [r3, #0]
}
1a001510:	b2c0      	uxtb	r0, r0
1a001512:	4770      	bx	lr
1a001514:	1a001dd4 	.word	0x1a001dd4

1a001518 <uartTxWrite>:
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a001518:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00151c:	4b02      	ldr	r3, [pc, #8]	; (1a001528 <uartTxWrite+0x10>)
1a00151e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	pUART->THR = (uint32_t) data;
1a001522:	6019      	str	r1, [r3, #0]
}
1a001524:	4770      	bx	lr
1a001526:	bf00      	nop
1a001528:	1a001dd4 	.word	0x1a001dd4

1a00152c <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a00152c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001530:	4604      	mov	r4, r0
1a001532:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a001534:	4d19      	ldr	r5, [pc, #100]	; (1a00159c <uartInit+0x70>)
1a001536:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a00153a:	eb05 0683 	add.w	r6, r5, r3, lsl #2
1a00153e:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
1a001542:	4638      	mov	r0, r7
1a001544:	f7ff fb5e 	bl	1a000c04 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a001548:	4649      	mov	r1, r9
1a00154a:	4638      	mov	r0, r7
1a00154c:	f7ff fb84 	bl	1a000c58 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a001550:	2307      	movs	r3, #7
1a001552:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001554:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a001556:	2301      	movs	r3, #1
1a001558:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a00155a:	7930      	ldrb	r0, [r6, #4]
1a00155c:	7973      	ldrb	r3, [r6, #5]
1a00155e:	79b2      	ldrb	r2, [r6, #6]
1a001560:	f042 0218 	orr.w	r2, r2, #24
1a001564:	490e      	ldr	r1, [pc, #56]	; (1a0015a0 <uartInit+0x74>)
1a001566:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a00156e:	79f0      	ldrb	r0, [r6, #7]
1a001570:	7a33      	ldrb	r3, [r6, #8]
1a001572:	7a72      	ldrb	r2, [r6, #9]
1a001574:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001578:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00157c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a001580:	2c01      	cmp	r4, #1
1a001582:	d001      	beq.n	1a001588 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a001584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a001588:	4a06      	ldr	r2, [pc, #24]	; (1a0015a4 <uartInit+0x78>)
1a00158a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a00158c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a001590:	64d3      	str	r3, [r2, #76]	; 0x4c
1a001592:	221a      	movs	r2, #26
1a001594:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a001598:	e7f4      	b.n	1a001584 <uartInit+0x58>
1a00159a:	bf00      	nop
1a00159c:	1a001dd4 	.word	0x1a001dd4
1a0015a0:	40086000 	.word	0x40086000
1a0015a4:	40081000 	.word	0x40081000

1a0015a8 <uartReadByte>:
//(en caso de que haya un dato por recibir)
//retorna TRUE si recibio un dato, FALSE si no hay dato recibido.


bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte )
{
1a0015a8:	b538      	push	{r3, r4, r5, lr}
1a0015aa:	4605      	mov	r5, r0
1a0015ac:	460c      	mov	r4, r1
   bool_t retVal = TRUE;
   if ( uartRxReady(uart) ) {
1a0015ae:	f7ff ff91 	bl	1a0014d4 <uartRxReady>
1a0015b2:	b900      	cbnz	r0, 1a0015b6 <uartReadByte+0xe>
      *receivedByte = uartRxRead(uart);
   } else {
      retVal = FALSE;
   }
   return retVal;
}
1a0015b4:	bd38      	pop	{r3, r4, r5, pc}
      *receivedByte = uartRxRead(uart);
1a0015b6:	4628      	mov	r0, r5
1a0015b8:	f7ff ffa4 	bl	1a001504 <uartRxRead>
1a0015bc:	7020      	strb	r0, [r4, #0]
   bool_t retVal = TRUE;
1a0015be:	2001      	movs	r0, #1
1a0015c0:	e7f8      	b.n	1a0015b4 <uartReadByte+0xc>

1a0015c2 <uartWriteByte>:

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a0015c2:	b538      	push	{r3, r4, r5, lr}
1a0015c4:	4604      	mov	r4, r0
1a0015c6:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a0015c8:	4620      	mov	r0, r4
1a0015ca:	f7ff ff8f 	bl	1a0014ec <uartTxReady>
1a0015ce:	2800      	cmp	r0, #0
1a0015d0:	d0fa      	beq.n	1a0015c8 <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a0015d2:	4629      	mov	r1, r5
1a0015d4:	4620      	mov	r0, r4
1a0015d6:	f7ff ff9f 	bl	1a001518 <uartTxWrite>
}
1a0015da:	bd38      	pop	{r3, r4, r5, pc}

1a0015dc <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a0015dc:	b538      	push	{r3, r4, r5, lr}
1a0015de:	4605      	mov	r5, r0
1a0015e0:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a0015e2:	7821      	ldrb	r1, [r4, #0]
1a0015e4:	b121      	cbz	r1, 1a0015f0 <uartWriteString+0x14>
      uartWriteByte( uart, (uint8_t)*str );
1a0015e6:	4628      	mov	r0, r5
1a0015e8:	f7ff ffeb 	bl	1a0015c2 <uartWriteByte>
      str++;
1a0015ec:	3401      	adds	r4, #1
1a0015ee:	e7f8      	b.n	1a0015e2 <uartWriteString+0x6>
   }
}
1a0015f0:	bd38      	pop	{r3, r4, r5, pc}
1a0015f2:	Address 0x1a0015f2 is out of bounds.


1a0015f4 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0015f4:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0015f6:	4b04      	ldr	r3, [pc, #16]	; (1a001608 <USB0_IRQHandler+0x14>)
1a0015f8:	681b      	ldr	r3, [r3, #0]
1a0015fa:	681b      	ldr	r3, [r3, #0]
1a0015fc:	68db      	ldr	r3, [r3, #12]
1a0015fe:	4a03      	ldr	r2, [pc, #12]	; (1a00160c <USB0_IRQHandler+0x18>)
1a001600:	6810      	ldr	r0, [r2, #0]
1a001602:	4798      	blx	r3
}
1a001604:	bd08      	pop	{r3, pc}
1a001606:	bf00      	nop
1a001608:	10000470 	.word	0x10000470
1a00160c:	10000064 	.word	0x10000064

1a001610 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001610:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001612:	f7fe ffa1 	bl	1a000558 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001616:	4b1a      	ldr	r3, [pc, #104]	; (1a001680 <boardInit+0x70>)
1a001618:	6818      	ldr	r0, [r3, #0]
1a00161a:	f7ff fdb5 	bl	1a001188 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a00161e:	2001      	movs	r0, #1
1a001620:	2100      	movs	r1, #0
1a001622:	f7ff fee1 	bl	1a0013e8 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a001626:	2105      	movs	r1, #5
1a001628:	2000      	movs	r0, #0
1a00162a:	f7ff fdd5 	bl	1a0011d8 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a00162e:	2100      	movs	r1, #0
1a001630:	2024      	movs	r0, #36	; 0x24
1a001632:	f7ff fdd1 	bl	1a0011d8 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a001636:	2100      	movs	r1, #0
1a001638:	2025      	movs	r0, #37	; 0x25
1a00163a:	f7ff fdcd 	bl	1a0011d8 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a00163e:	2100      	movs	r1, #0
1a001640:	2026      	movs	r0, #38	; 0x26
1a001642:	f7ff fdc9 	bl	1a0011d8 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a001646:	2100      	movs	r1, #0
1a001648:	2027      	movs	r0, #39	; 0x27
1a00164a:	f7ff fdc5 	bl	1a0011d8 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a00164e:	2101      	movs	r1, #1
1a001650:	2028      	movs	r0, #40	; 0x28
1a001652:	f7ff fdc1 	bl	1a0011d8 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a001656:	2101      	movs	r1, #1
1a001658:	2029      	movs	r0, #41	; 0x29
1a00165a:	f7ff fdbd 	bl	1a0011d8 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a00165e:	2101      	movs	r1, #1
1a001660:	202a      	movs	r0, #42	; 0x2a
1a001662:	f7ff fdb9 	bl	1a0011d8 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a001666:	2101      	movs	r1, #1
1a001668:	202b      	movs	r0, #43	; 0x2b
1a00166a:	f7ff fdb5 	bl	1a0011d8 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a00166e:	2101      	movs	r1, #1
1a001670:	202c      	movs	r0, #44	; 0x2c
1a001672:	f7ff fdb1 	bl	1a0011d8 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a001676:	2101      	movs	r1, #1
1a001678:	202d      	movs	r0, #45	; 0x2d
1a00167a:	f7ff fdad 	bl	1a0011d8 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a00167e:	bd08      	pop	{r3, pc}
1a001680:	1000046c 	.word	0x1000046c

1a001684 <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a001684:	b510      	push	{r4, lr}
1a001686:	4604      	mov	r4, r0
1a001688:	4610      	mov	r0, r2
1a00168a:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a00168c:	4b04      	ldr	r3, [pc, #16]	; (1a0016a0 <delayInit+0x1c>)
1a00168e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001692:	f000 f8c9 	bl	1a001828 <__aeabi_uldivmod>
1a001696:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a00169a:	2300      	movs	r3, #0
1a00169c:	7423      	strb	r3, [r4, #16]
}
1a00169e:	bd10      	pop	{r4, pc}
1a0016a0:	10000040 	.word	0x10000040

1a0016a4 <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a0016a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0016a6:	4604      	mov	r4, r0

   bool_t timeArrived = 0;

   if( !delay->running ) {
1a0016a8:	7c05      	ldrb	r5, [r0, #16]
1a0016aa:	b93d      	cbnz	r5, 1a0016bc <delayRead+0x18>
      delay->startTime = tickRead();
1a0016ac:	f7ff fe8a 	bl	1a0013c4 <tickRead>
1a0016b0:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a0016b4:	2301      	movs	r3, #1
1a0016b6:	7423      	strb	r3, [r4, #16]
         delay->running = 0;
      }
   }

   return timeArrived;
}
1a0016b8:	4628      	mov	r0, r5
1a0016ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a0016bc:	f7ff fe82 	bl	1a0013c4 <tickRead>
1a0016c0:	6823      	ldr	r3, [r4, #0]
1a0016c2:	6862      	ldr	r2, [r4, #4]
1a0016c4:	1ac6      	subs	r6, r0, r3
1a0016c6:	eb61 0702 	sbc.w	r7, r1, r2
1a0016ca:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a0016ce:	429f      	cmp	r7, r3
1a0016d0:	bf08      	it	eq
1a0016d2:	4296      	cmpeq	r6, r2
1a0016d4:	d303      	bcc.n	1a0016de <delayRead+0x3a>
         delay->running = 0;
1a0016d6:	2300      	movs	r3, #0
1a0016d8:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a0016da:	2501      	movs	r5, #1
1a0016dc:	e7ec      	b.n	1a0016b8 <delayRead+0x14>
   bool_t timeArrived = 0;
1a0016de:	2500      	movs	r5, #0
1a0016e0:	e7ea      	b.n	1a0016b8 <delayRead+0x14>
1a0016e2:	Address 0x1a0016e2 is out of bounds.


1a0016e4 <uartReadString>:
	while((*str)[j]!='\0'){
		(*str)[j++] = 0;
	}
}

static bool_t uartReadString(uint8_t readByte){
1a0016e4:	b508      	push	{r3, lr}
	//static uint8_t strRx[100];
	static char strRx[1024];
	static uint16_t strPos = 0;

	strRx[strPos] = readByte;
1a0016e6:	4a0c      	ldr	r2, [pc, #48]	; (1a001718 <uartReadString+0x34>)
1a0016e8:	8813      	ldrh	r3, [r2, #0]
1a0016ea:	490c      	ldr	r1, [pc, #48]	; (1a00171c <uartReadString+0x38>)
1a0016ec:	54c8      	strb	r0, [r1, r3]
	strPos++;
1a0016ee:	3301      	adds	r3, #1
1a0016f0:	b29b      	uxth	r3, r3
1a0016f2:	8013      	strh	r3, [r2, #0]

	if(strPos == 1024){
1a0016f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
1a0016f8:	d002      	beq.n	1a001700 <uartReadString+0x1c>
		strPos = 0;
		return FALSE;
	}

	if(readByte == '\0'){
1a0016fa:	b120      	cbz	r0, 1a001706 <uartReadString+0x22>
		uartWriteString(UART_USB,strRx);
		strPos = 0;
		return TRUE;
	}

	return FALSE;
1a0016fc:	2000      	movs	r0, #0
}
1a0016fe:	bd08      	pop	{r3, pc}
		strPos = 0;
1a001700:	2000      	movs	r0, #0
1a001702:	8010      	strh	r0, [r2, #0]
		return FALSE;
1a001704:	e7fb      	b.n	1a0016fe <uartReadString+0x1a>
		uartWriteString(UART_USB,strRx);
1a001706:	4905      	ldr	r1, [pc, #20]	; (1a00171c <uartReadString+0x38>)
1a001708:	2003      	movs	r0, #3
1a00170a:	f7ff ff67 	bl	1a0015dc <uartWriteString>
		strPos = 0;
1a00170e:	4b02      	ldr	r3, [pc, #8]	; (1a001718 <uartReadString+0x34>)
1a001710:	2200      	movs	r2, #0
1a001712:	801a      	strh	r2, [r3, #0]
		return TRUE;
1a001714:	2001      	movs	r0, #1
1a001716:	e7f2      	b.n	1a0016fe <uartReadString+0x1a>
1a001718:	10000068 	.word	0x10000068
1a00171c:	1000006c 	.word	0x1000006c

1a001720 <main>:


/* FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE RESET. */
int main(void){
1a001720:	b530      	push	{r4, r5, lr}
1a001722:	b097      	sub	sp, #92	; 0x5c

   /* ------------- INICIALIZACIONES ------------- */

   /* Inicializar la placa */
   boardConfig();
1a001724:	f7ff ff74 	bl	1a001610 <boardInit>

   /* Inicializar UART_USB a 115200 baudios */
   uartConfig( UART_USB, 115200 );
1a001728:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00172c:	2003      	movs	r0, #3
1a00172e:	f7ff fefd 	bl	1a00152c <uartInit>
    *    ADC_ENABLE,  ADC_DISABLE,
    */

   //adcConfig( ADC_ENABLE ); /* ADC */

   ADC_CLOCK_SETUP_T ADCSetup = {
1a001732:	4b37      	ldr	r3, [pc, #220]	; (1a001810 <main+0xf0>)
1a001734:	9314      	str	r3, [sp, #80]	; 0x50
1a001736:	2500      	movs	r5, #0
1a001738:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
1a00173c:	f88d 5055 	strb.w	r5, [sp, #85]	; 0x55
   	       ADC_MAX_SAMPLE_RATE,   // ADC Sample rate:ADC_MAX_SAMPLE_RATE = 400KHz
   	       ADC_10BITS,            // ADC resolution: ADC_10BITS = 10
   	       DISABLE                // ADC Burst Mode: (true or false)
   	    };

   	   Chip_ADC_Init( LPC_ADC0, &ADCSetup );
1a001740:	4c34      	ldr	r4, [pc, #208]	; (1a001814 <main+0xf4>)
1a001742:	a914      	add	r1, sp, #80	; 0x50
1a001744:	4620      	mov	r0, r4
1a001746:	f7ff fb81 	bl	1a000e4c <Chip_ADC_Init>
   	            /* Disable burst mode */
   	           Chip_ADC_SetBurstCmd( LPC_ADC0, ENABLE );
1a00174a:	2101      	movs	r1, #1
1a00174c:	4620      	mov	r0, r4
1a00174e:	f7ff fbe0 	bl	1a000f12 <Chip_ADC_SetBurstCmd>
   	            /* Set sample rate to 200KHz */
   	            Chip_ADC_SetSampleRate( LPC_ADC0, &ADCSetup, ADC_MAX_SAMPLE_RATE/2 );
1a001752:	4a31      	ldr	r2, [pc, #196]	; (1a001818 <main+0xf8>)
1a001754:	a914      	add	r1, sp, #80	; 0x50
1a001756:	4620      	mov	r0, r4
1a001758:	f7ff fba8 	bl	1a000eac <Chip_ADC_SetSampleRate>
   	            /* Disable all channels */
   	            Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH1, ENABLE );
1a00175c:	2201      	movs	r2, #1
1a00175e:	4611      	mov	r1, r2
1a001760:	4620      	mov	r0, r4
1a001762:	f7ff fbc2 	bl	1a000eea <Chip_ADC_EnableChannel>
   	            Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH1, ENABLE );
1a001766:	2201      	movs	r2, #1
1a001768:	4611      	mov	r1, r2
1a00176a:	4620      	mov	r0, r4
1a00176c:	f7ff fb8e 	bl	1a000e8c <Chip_ADC_Int_SetChannelCmd>
   	//
   	//            Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH4, DISABLE );
   	//            Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH4, DISABLE );


   dacConfig( DAC_ENABLE ); /* DAC */
1a001770:	4628      	mov	r0, r5
1a001772:	f7ff fe8d 	bl	1a001490 <dacInit>

   /* Variables de delays no bloqueantes */
   delay_t delay1, delay2, delayRx;

   /* Inicializar Retardo no bloqueante con tiempo en ms */
   delayConfig( &delay1, 0 );
1a001776:	2200      	movs	r2, #0
1a001778:	2300      	movs	r3, #0
1a00177a:	a80c      	add	r0, sp, #48	; 0x30
1a00177c:	f7ff ff82 	bl	1a001684 <delayInit>
   delayConfig( &delay2, 200 );
1a001780:	22c8      	movs	r2, #200	; 0xc8
1a001782:	2300      	movs	r3, #0
1a001784:	a806      	add	r0, sp, #24
1a001786:	f7ff ff7d 	bl	1a001684 <delayInit>
   delayConfig( &delayRx, 0);
1a00178a:	2200      	movs	r2, #0
1a00178c:	2300      	movs	r3, #0
1a00178e:	4668      	mov	r0, sp
1a001790:	f7ff ff78 	bl	1a001684 <delayInit>
1a001794:	e00f      	b.n	1a0017b6 <main+0x96>

         /* Leo la Entrada Analogica AI0 - ADC0 CH1 */
         //muestra = adcRead( CH1 );

         /* Envío la primer parte del mnesaje a la Uart */
    	 uartWriteString( UART_USB, LOREM_IPSUM);
1a001796:	4921      	ldr	r1, [pc, #132]	; (1a00181c <main+0xfc>)
1a001798:	2003      	movs	r0, #3
1a00179a:	f7ff ff1f 	bl	1a0015dc <uartWriteString>
         uartWriteString( UART_USB, LOREM_IPSUM2);
1a00179e:	4920      	ldr	r1, [pc, #128]	; (1a001820 <main+0x100>)
1a0017a0:	2003      	movs	r0, #3
1a0017a2:	f7ff ff1b 	bl	1a0015dc <uartWriteString>
         uartWriteString( UART_USB, ";\r\n" );
1a0017a6:	491f      	ldr	r1, [pc, #124]	; (1a001824 <main+0x104>)
1a0017a8:	2003      	movs	r0, #3
1a0017aa:	f7ff ff17 	bl	1a0015dc <uartWriteString>
         //uartWriteString( UART_USB, uartBuff );


      }

      if(delayRead(&delayRx)){
1a0017ae:	4668      	mov	r0, sp
1a0017b0:	f7ff ff78 	bl	1a0016a4 <delayRead>
1a0017b4:	b928      	cbnz	r0, 1a0017c2 <main+0xa2>
      if ( delayRead( &delay1 ) ){
1a0017b6:	a80c      	add	r0, sp, #48	; 0x30
1a0017b8:	f7ff ff74 	bl	1a0016a4 <delayRead>
1a0017bc:	2800      	cmp	r0, #0
1a0017be:	d0f6      	beq.n	1a0017ae <main+0x8e>
1a0017c0:	e7e9      	b.n	1a001796 <main+0x76>
    	    uartReadByte(UART_USB,&rxData);
1a0017c2:	f10d 014f 	add.w	r1, sp, #79	; 0x4f
1a0017c6:	2003      	movs	r0, #3
1a0017c8:	f7ff feee 	bl	1a0015a8 <uartReadByte>
    	    uartReadString(rxData);
1a0017cc:	f89d 004f 	ldrb.w	r0, [sp, #79]	; 0x4f
1a0017d0:	f7ff ff88 	bl	1a0016e4 <uartReadString>

    	    object_x_pos = rxData;
1a0017d4:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f

    		if(object_x_pos > 0){
1a0017d8:	b183      	cbz	r3, 1a0017fc <main+0xdc>
    			gpioWrite(LED1,FALSE);
1a0017da:	2100      	movs	r1, #0
1a0017dc:	202b      	movs	r0, #43	; 0x2b
1a0017de:	f7ff fdc5 	bl	1a00136c <gpioWrite>
    			gpioWrite(LEDB,TRUE);
1a0017e2:	2101      	movs	r1, #1
1a0017e4:	202a      	movs	r0, #42	; 0x2a
1a0017e6:	f7ff fdc1 	bl	1a00136c <gpioWrite>

    		if(object_y_pos > 0){
    			gpioWrite(LED3,FALSE);
				gpioWrite(LED2,TRUE);
    		}else if(object_y_pos <= 0){
    			gpioWrite(LED2,FALSE);
1a0017ea:	2100      	movs	r1, #0
1a0017ec:	202c      	movs	r0, #44	; 0x2c
1a0017ee:	f7ff fdbd 	bl	1a00136c <gpioWrite>
    			gpioWrite(LED3,TRUE);
1a0017f2:	2101      	movs	r1, #1
1a0017f4:	202d      	movs	r0, #45	; 0x2d
1a0017f6:	f7ff fdb9 	bl	1a00136c <gpioWrite>
1a0017fa:	e7dc      	b.n	1a0017b6 <main+0x96>
    			gpioWrite(LEDB,FALSE);
1a0017fc:	2100      	movs	r1, #0
1a0017fe:	202a      	movs	r0, #42	; 0x2a
1a001800:	f7ff fdb4 	bl	1a00136c <gpioWrite>
    			gpioWrite(LED1,TRUE);
1a001804:	2101      	movs	r1, #1
1a001806:	202b      	movs	r0, #43	; 0x2b
1a001808:	f7ff fdb0 	bl	1a00136c <gpioWrite>
1a00180c:	e7ed      	b.n	1a0017ea <main+0xca>
1a00180e:	bf00      	nop
1a001810:	00061a80 	.word	0x00061a80
1a001814:	400e3000 	.word	0x400e3000
1a001818:	00030d40 	.word	0x00030d40
1a00181c:	1a001e1c 	.word	0x1a001e1c
1a001820:	1a001fdc 	.word	0x1a001fdc
1a001824:	1a0026b4 	.word	0x1a0026b4

1a001828 <__aeabi_uldivmod>:
1a001828:	b953      	cbnz	r3, 1a001840 <__aeabi_uldivmod+0x18>
1a00182a:	b94a      	cbnz	r2, 1a001840 <__aeabi_uldivmod+0x18>
1a00182c:	2900      	cmp	r1, #0
1a00182e:	bf08      	it	eq
1a001830:	2800      	cmpeq	r0, #0
1a001832:	bf1c      	itt	ne
1a001834:	f04f 31ff 	movne.w	r1, #4294967295
1a001838:	f04f 30ff 	movne.w	r0, #4294967295
1a00183c:	f000 b96e 	b.w	1a001b1c <__aeabi_idiv0>
1a001840:	f1ad 0c08 	sub.w	ip, sp, #8
1a001844:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001848:	f000 f806 	bl	1a001858 <__udivmoddi4>
1a00184c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001850:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001854:	b004      	add	sp, #16
1a001856:	4770      	bx	lr

1a001858 <__udivmoddi4>:
1a001858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00185c:	9d08      	ldr	r5, [sp, #32]
1a00185e:	4604      	mov	r4, r0
1a001860:	468c      	mov	ip, r1
1a001862:	2b00      	cmp	r3, #0
1a001864:	f040 8083 	bne.w	1a00196e <__udivmoddi4+0x116>
1a001868:	428a      	cmp	r2, r1
1a00186a:	4617      	mov	r7, r2
1a00186c:	d947      	bls.n	1a0018fe <__udivmoddi4+0xa6>
1a00186e:	fab2 f282 	clz	r2, r2
1a001872:	b142      	cbz	r2, 1a001886 <__udivmoddi4+0x2e>
1a001874:	f1c2 0020 	rsb	r0, r2, #32
1a001878:	fa24 f000 	lsr.w	r0, r4, r0
1a00187c:	4091      	lsls	r1, r2
1a00187e:	4097      	lsls	r7, r2
1a001880:	ea40 0c01 	orr.w	ip, r0, r1
1a001884:	4094      	lsls	r4, r2
1a001886:	ea4f 4817 	mov.w	r8, r7, lsr #16
1a00188a:	0c23      	lsrs	r3, r4, #16
1a00188c:	fbbc f6f8 	udiv	r6, ip, r8
1a001890:	fa1f fe87 	uxth.w	lr, r7
1a001894:	fb08 c116 	mls	r1, r8, r6, ip
1a001898:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00189c:	fb06 f10e 	mul.w	r1, r6, lr
1a0018a0:	4299      	cmp	r1, r3
1a0018a2:	d909      	bls.n	1a0018b8 <__udivmoddi4+0x60>
1a0018a4:	18fb      	adds	r3, r7, r3
1a0018a6:	f106 30ff 	add.w	r0, r6, #4294967295
1a0018aa:	f080 8119 	bcs.w	1a001ae0 <__udivmoddi4+0x288>
1a0018ae:	4299      	cmp	r1, r3
1a0018b0:	f240 8116 	bls.w	1a001ae0 <__udivmoddi4+0x288>
1a0018b4:	3e02      	subs	r6, #2
1a0018b6:	443b      	add	r3, r7
1a0018b8:	1a5b      	subs	r3, r3, r1
1a0018ba:	b2a4      	uxth	r4, r4
1a0018bc:	fbb3 f0f8 	udiv	r0, r3, r8
1a0018c0:	fb08 3310 	mls	r3, r8, r0, r3
1a0018c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0018c8:	fb00 fe0e 	mul.w	lr, r0, lr
1a0018cc:	45a6      	cmp	lr, r4
1a0018ce:	d909      	bls.n	1a0018e4 <__udivmoddi4+0x8c>
1a0018d0:	193c      	adds	r4, r7, r4
1a0018d2:	f100 33ff 	add.w	r3, r0, #4294967295
1a0018d6:	f080 8105 	bcs.w	1a001ae4 <__udivmoddi4+0x28c>
1a0018da:	45a6      	cmp	lr, r4
1a0018dc:	f240 8102 	bls.w	1a001ae4 <__udivmoddi4+0x28c>
1a0018e0:	3802      	subs	r0, #2
1a0018e2:	443c      	add	r4, r7
1a0018e4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
1a0018e8:	eba4 040e 	sub.w	r4, r4, lr
1a0018ec:	2600      	movs	r6, #0
1a0018ee:	b11d      	cbz	r5, 1a0018f8 <__udivmoddi4+0xa0>
1a0018f0:	40d4      	lsrs	r4, r2
1a0018f2:	2300      	movs	r3, #0
1a0018f4:	e9c5 4300 	strd	r4, r3, [r5]
1a0018f8:	4631      	mov	r1, r6
1a0018fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0018fe:	b902      	cbnz	r2, 1a001902 <__udivmoddi4+0xaa>
1a001900:	deff      	udf	#255	; 0xff
1a001902:	fab2 f282 	clz	r2, r2
1a001906:	2a00      	cmp	r2, #0
1a001908:	d150      	bne.n	1a0019ac <__udivmoddi4+0x154>
1a00190a:	1bcb      	subs	r3, r1, r7
1a00190c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
1a001910:	fa1f f887 	uxth.w	r8, r7
1a001914:	2601      	movs	r6, #1
1a001916:	fbb3 fcfe 	udiv	ip, r3, lr
1a00191a:	0c21      	lsrs	r1, r4, #16
1a00191c:	fb0e 331c 	mls	r3, lr, ip, r3
1a001920:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001924:	fb08 f30c 	mul.w	r3, r8, ip
1a001928:	428b      	cmp	r3, r1
1a00192a:	d907      	bls.n	1a00193c <__udivmoddi4+0xe4>
1a00192c:	1879      	adds	r1, r7, r1
1a00192e:	f10c 30ff 	add.w	r0, ip, #4294967295
1a001932:	d202      	bcs.n	1a00193a <__udivmoddi4+0xe2>
1a001934:	428b      	cmp	r3, r1
1a001936:	f200 80e9 	bhi.w	1a001b0c <__udivmoddi4+0x2b4>
1a00193a:	4684      	mov	ip, r0
1a00193c:	1ac9      	subs	r1, r1, r3
1a00193e:	b2a3      	uxth	r3, r4
1a001940:	fbb1 f0fe 	udiv	r0, r1, lr
1a001944:	fb0e 1110 	mls	r1, lr, r0, r1
1a001948:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
1a00194c:	fb08 f800 	mul.w	r8, r8, r0
1a001950:	45a0      	cmp	r8, r4
1a001952:	d907      	bls.n	1a001964 <__udivmoddi4+0x10c>
1a001954:	193c      	adds	r4, r7, r4
1a001956:	f100 33ff 	add.w	r3, r0, #4294967295
1a00195a:	d202      	bcs.n	1a001962 <__udivmoddi4+0x10a>
1a00195c:	45a0      	cmp	r8, r4
1a00195e:	f200 80d9 	bhi.w	1a001b14 <__udivmoddi4+0x2bc>
1a001962:	4618      	mov	r0, r3
1a001964:	eba4 0408 	sub.w	r4, r4, r8
1a001968:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a00196c:	e7bf      	b.n	1a0018ee <__udivmoddi4+0x96>
1a00196e:	428b      	cmp	r3, r1
1a001970:	d909      	bls.n	1a001986 <__udivmoddi4+0x12e>
1a001972:	2d00      	cmp	r5, #0
1a001974:	f000 80b1 	beq.w	1a001ada <__udivmoddi4+0x282>
1a001978:	2600      	movs	r6, #0
1a00197a:	e9c5 0100 	strd	r0, r1, [r5]
1a00197e:	4630      	mov	r0, r6
1a001980:	4631      	mov	r1, r6
1a001982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001986:	fab3 f683 	clz	r6, r3
1a00198a:	2e00      	cmp	r6, #0
1a00198c:	d14a      	bne.n	1a001a24 <__udivmoddi4+0x1cc>
1a00198e:	428b      	cmp	r3, r1
1a001990:	d302      	bcc.n	1a001998 <__udivmoddi4+0x140>
1a001992:	4282      	cmp	r2, r0
1a001994:	f200 80b8 	bhi.w	1a001b08 <__udivmoddi4+0x2b0>
1a001998:	1a84      	subs	r4, r0, r2
1a00199a:	eb61 0103 	sbc.w	r1, r1, r3
1a00199e:	2001      	movs	r0, #1
1a0019a0:	468c      	mov	ip, r1
1a0019a2:	2d00      	cmp	r5, #0
1a0019a4:	d0a8      	beq.n	1a0018f8 <__udivmoddi4+0xa0>
1a0019a6:	e9c5 4c00 	strd	r4, ip, [r5]
1a0019aa:	e7a5      	b.n	1a0018f8 <__udivmoddi4+0xa0>
1a0019ac:	f1c2 0320 	rsb	r3, r2, #32
1a0019b0:	fa20 f603 	lsr.w	r6, r0, r3
1a0019b4:	4097      	lsls	r7, r2
1a0019b6:	fa01 f002 	lsl.w	r0, r1, r2
1a0019ba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
1a0019be:	40d9      	lsrs	r1, r3
1a0019c0:	4330      	orrs	r0, r6
1a0019c2:	0c03      	lsrs	r3, r0, #16
1a0019c4:	fbb1 f6fe 	udiv	r6, r1, lr
1a0019c8:	fa1f f887 	uxth.w	r8, r7
1a0019cc:	fb0e 1116 	mls	r1, lr, r6, r1
1a0019d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0019d4:	fb06 f108 	mul.w	r1, r6, r8
1a0019d8:	4299      	cmp	r1, r3
1a0019da:	fa04 f402 	lsl.w	r4, r4, r2
1a0019de:	d909      	bls.n	1a0019f4 <__udivmoddi4+0x19c>
1a0019e0:	18fb      	adds	r3, r7, r3
1a0019e2:	f106 3cff 	add.w	ip, r6, #4294967295
1a0019e6:	f080 808d 	bcs.w	1a001b04 <__udivmoddi4+0x2ac>
1a0019ea:	4299      	cmp	r1, r3
1a0019ec:	f240 808a 	bls.w	1a001b04 <__udivmoddi4+0x2ac>
1a0019f0:	3e02      	subs	r6, #2
1a0019f2:	443b      	add	r3, r7
1a0019f4:	1a5b      	subs	r3, r3, r1
1a0019f6:	b281      	uxth	r1, r0
1a0019f8:	fbb3 f0fe 	udiv	r0, r3, lr
1a0019fc:	fb0e 3310 	mls	r3, lr, r0, r3
1a001a00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001a04:	fb00 f308 	mul.w	r3, r0, r8
1a001a08:	428b      	cmp	r3, r1
1a001a0a:	d907      	bls.n	1a001a1c <__udivmoddi4+0x1c4>
1a001a0c:	1879      	adds	r1, r7, r1
1a001a0e:	f100 3cff 	add.w	ip, r0, #4294967295
1a001a12:	d273      	bcs.n	1a001afc <__udivmoddi4+0x2a4>
1a001a14:	428b      	cmp	r3, r1
1a001a16:	d971      	bls.n	1a001afc <__udivmoddi4+0x2a4>
1a001a18:	3802      	subs	r0, #2
1a001a1a:	4439      	add	r1, r7
1a001a1c:	1acb      	subs	r3, r1, r3
1a001a1e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a001a22:	e778      	b.n	1a001916 <__udivmoddi4+0xbe>
1a001a24:	f1c6 0c20 	rsb	ip, r6, #32
1a001a28:	fa03 f406 	lsl.w	r4, r3, r6
1a001a2c:	fa22 f30c 	lsr.w	r3, r2, ip
1a001a30:	431c      	orrs	r4, r3
1a001a32:	fa20 f70c 	lsr.w	r7, r0, ip
1a001a36:	fa01 f306 	lsl.w	r3, r1, r6
1a001a3a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
1a001a3e:	fa21 f10c 	lsr.w	r1, r1, ip
1a001a42:	431f      	orrs	r7, r3
1a001a44:	0c3b      	lsrs	r3, r7, #16
1a001a46:	fbb1 f9fe 	udiv	r9, r1, lr
1a001a4a:	fa1f f884 	uxth.w	r8, r4
1a001a4e:	fb0e 1119 	mls	r1, lr, r9, r1
1a001a52:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a001a56:	fb09 fa08 	mul.w	sl, r9, r8
1a001a5a:	458a      	cmp	sl, r1
1a001a5c:	fa02 f206 	lsl.w	r2, r2, r6
1a001a60:	fa00 f306 	lsl.w	r3, r0, r6
1a001a64:	d908      	bls.n	1a001a78 <__udivmoddi4+0x220>
1a001a66:	1861      	adds	r1, r4, r1
1a001a68:	f109 30ff 	add.w	r0, r9, #4294967295
1a001a6c:	d248      	bcs.n	1a001b00 <__udivmoddi4+0x2a8>
1a001a6e:	458a      	cmp	sl, r1
1a001a70:	d946      	bls.n	1a001b00 <__udivmoddi4+0x2a8>
1a001a72:	f1a9 0902 	sub.w	r9, r9, #2
1a001a76:	4421      	add	r1, r4
1a001a78:	eba1 010a 	sub.w	r1, r1, sl
1a001a7c:	b2bf      	uxth	r7, r7
1a001a7e:	fbb1 f0fe 	udiv	r0, r1, lr
1a001a82:	fb0e 1110 	mls	r1, lr, r0, r1
1a001a86:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
1a001a8a:	fb00 f808 	mul.w	r8, r0, r8
1a001a8e:	45b8      	cmp	r8, r7
1a001a90:	d907      	bls.n	1a001aa2 <__udivmoddi4+0x24a>
1a001a92:	19e7      	adds	r7, r4, r7
1a001a94:	f100 31ff 	add.w	r1, r0, #4294967295
1a001a98:	d22e      	bcs.n	1a001af8 <__udivmoddi4+0x2a0>
1a001a9a:	45b8      	cmp	r8, r7
1a001a9c:	d92c      	bls.n	1a001af8 <__udivmoddi4+0x2a0>
1a001a9e:	3802      	subs	r0, #2
1a001aa0:	4427      	add	r7, r4
1a001aa2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001aa6:	eba7 0708 	sub.w	r7, r7, r8
1a001aaa:	fba0 8902 	umull	r8, r9, r0, r2
1a001aae:	454f      	cmp	r7, r9
1a001ab0:	46c6      	mov	lr, r8
1a001ab2:	4649      	mov	r1, r9
1a001ab4:	d31a      	bcc.n	1a001aec <__udivmoddi4+0x294>
1a001ab6:	d017      	beq.n	1a001ae8 <__udivmoddi4+0x290>
1a001ab8:	b15d      	cbz	r5, 1a001ad2 <__udivmoddi4+0x27a>
1a001aba:	ebb3 020e 	subs.w	r2, r3, lr
1a001abe:	eb67 0701 	sbc.w	r7, r7, r1
1a001ac2:	fa07 fc0c 	lsl.w	ip, r7, ip
1a001ac6:	40f2      	lsrs	r2, r6
1a001ac8:	ea4c 0202 	orr.w	r2, ip, r2
1a001acc:	40f7      	lsrs	r7, r6
1a001ace:	e9c5 2700 	strd	r2, r7, [r5]
1a001ad2:	2600      	movs	r6, #0
1a001ad4:	4631      	mov	r1, r6
1a001ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001ada:	462e      	mov	r6, r5
1a001adc:	4628      	mov	r0, r5
1a001ade:	e70b      	b.n	1a0018f8 <__udivmoddi4+0xa0>
1a001ae0:	4606      	mov	r6, r0
1a001ae2:	e6e9      	b.n	1a0018b8 <__udivmoddi4+0x60>
1a001ae4:	4618      	mov	r0, r3
1a001ae6:	e6fd      	b.n	1a0018e4 <__udivmoddi4+0x8c>
1a001ae8:	4543      	cmp	r3, r8
1a001aea:	d2e5      	bcs.n	1a001ab8 <__udivmoddi4+0x260>
1a001aec:	ebb8 0e02 	subs.w	lr, r8, r2
1a001af0:	eb69 0104 	sbc.w	r1, r9, r4
1a001af4:	3801      	subs	r0, #1
1a001af6:	e7df      	b.n	1a001ab8 <__udivmoddi4+0x260>
1a001af8:	4608      	mov	r0, r1
1a001afa:	e7d2      	b.n	1a001aa2 <__udivmoddi4+0x24a>
1a001afc:	4660      	mov	r0, ip
1a001afe:	e78d      	b.n	1a001a1c <__udivmoddi4+0x1c4>
1a001b00:	4681      	mov	r9, r0
1a001b02:	e7b9      	b.n	1a001a78 <__udivmoddi4+0x220>
1a001b04:	4666      	mov	r6, ip
1a001b06:	e775      	b.n	1a0019f4 <__udivmoddi4+0x19c>
1a001b08:	4630      	mov	r0, r6
1a001b0a:	e74a      	b.n	1a0019a2 <__udivmoddi4+0x14a>
1a001b0c:	f1ac 0c02 	sub.w	ip, ip, #2
1a001b10:	4439      	add	r1, r7
1a001b12:	e713      	b.n	1a00193c <__udivmoddi4+0xe4>
1a001b14:	3802      	subs	r0, #2
1a001b16:	443c      	add	r4, r7
1a001b18:	e724      	b.n	1a001964 <__udivmoddi4+0x10c>
1a001b1a:	bf00      	nop

1a001b1c <__aeabi_idiv0>:
1a001b1c:	4770      	bx	lr
1a001b1e:	bf00      	nop

1a001b20 <__libc_init_array>:
1a001b20:	b570      	push	{r4, r5, r6, lr}
1a001b22:	4d0d      	ldr	r5, [pc, #52]	; (1a001b58 <__libc_init_array+0x38>)
1a001b24:	4c0d      	ldr	r4, [pc, #52]	; (1a001b5c <__libc_init_array+0x3c>)
1a001b26:	1b64      	subs	r4, r4, r5
1a001b28:	10a4      	asrs	r4, r4, #2
1a001b2a:	2600      	movs	r6, #0
1a001b2c:	42a6      	cmp	r6, r4
1a001b2e:	d109      	bne.n	1a001b44 <__libc_init_array+0x24>
1a001b30:	4d0b      	ldr	r5, [pc, #44]	; (1a001b60 <__libc_init_array+0x40>)
1a001b32:	4c0c      	ldr	r4, [pc, #48]	; (1a001b64 <__libc_init_array+0x44>)
1a001b34:	f7ff fb27 	bl	1a001186 <_init>
1a001b38:	1b64      	subs	r4, r4, r5
1a001b3a:	10a4      	asrs	r4, r4, #2
1a001b3c:	2600      	movs	r6, #0
1a001b3e:	42a6      	cmp	r6, r4
1a001b40:	d105      	bne.n	1a001b4e <__libc_init_array+0x2e>
1a001b42:	bd70      	pop	{r4, r5, r6, pc}
1a001b44:	f855 3b04 	ldr.w	r3, [r5], #4
1a001b48:	4798      	blx	r3
1a001b4a:	3601      	adds	r6, #1
1a001b4c:	e7ee      	b.n	1a001b2c <__libc_init_array+0xc>
1a001b4e:	f855 3b04 	ldr.w	r3, [r5], #4
1a001b52:	4798      	blx	r3
1a001b54:	3601      	adds	r6, #1
1a001b56:	e7f2      	b.n	1a001b3e <__libc_init_array+0x1e>
1a001b58:	1a0026b8 	.word	0x1a0026b8
1a001b5c:	1a0026b8 	.word	0x1a0026b8
1a001b60:	1a0026b8 	.word	0x1a0026b8
1a001b64:	1a0026b8 	.word	0x1a0026b8

1a001b68 <memset>:
1a001b68:	4402      	add	r2, r0
1a001b6a:	4603      	mov	r3, r0
1a001b6c:	4293      	cmp	r3, r2
1a001b6e:	d100      	bne.n	1a001b72 <memset+0xa>
1a001b70:	4770      	bx	lr
1a001b72:	f803 1b01 	strb.w	r1, [r3], #1
1a001b76:	e7f9      	b.n	1a001b6c <memset+0x4>

1a001b78 <InitClkStates>:
1a001b78:	0f01 0101                                   ....

1a001b7c <pinmuxing>:
1a001b7c:	0002 0044 0102 0044 0202 0044 0a02 0040     ..D...D...D...@.
1a001b8c:	0b02 0040 0c02 0040 0001 0050 0101 0050     ..@...@...P...P.
1a001b9c:	0201 0050 0601 0050 0106 0050 0406 0050     ..P...P...P...P.
1a001bac:	0506 0050 0706 0054 0806 0054 0906 0050     ..P...T...T...P.
1a001bbc:	0a06 0050 0b06 0050 0c06 0050 040f 00f0     ..P...P...P.....
1a001bcc:	0301 00d5 0401 00d5 0107 0016 0207 0056     ..............V.
1a001bdc:	0302 0052 0402 0052 0509 0052 0609 0057     ..R...R...R...W.
1a001bec:	0206 0057                                   ..W.

1a001bf0 <ExtRateIn>:
1a001bf0:	0000 0000                                   ....

1a001bf4 <GpioButtons>:
1a001bf4:	0400 0800 0900 0901                         ........

1a001bfc <GpioLeds>:
1a001bfc:	0005 0105 0205 0e00 0b01 0c01               ............

1a001c08 <GpioPorts>:
1a001c08:	0003 0303 0403 0f05 1005 0503 0603 0703     ................
1a001c18:	0802 ffff                                   ....

1a001c1c <OscRateIn>:
1a001c1c:	1b00 00b7 0f03 0f0f 00ff ffff               ............

1a001c28 <periph_to_base>:
1a001c28:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a001c38:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a001c48:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a001c58:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a001c68:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a001c78:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a001c88:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a001c94 <UART_BClock>:
1a001c94:	01c2 01a2 0182 0162                         ......b.

1a001c9c <UART_PClock>:
1a001c9c:	0081 0082 00a1 00a2                         ........

1a001ca4 <InitClkStates>:
1a001ca4:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a001cb4:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a001cc4:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a001cd4:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a001ce4:	111a 0001 111b 0001                         ........

1a001cec <gpioPinsInit>:
1a001cec:	0104 0200 0701 0005 0d03 0501 0100 0408     ................
1a001cfc:	0002 0202 0304 0200 0403 0000 0002 0407     ................
1a001d0c:	0300 030c 0402 0905 0103 0504 0208 0403     ................
1a001d1c:	0305 0402 0504 0604 000c 0802 0b06 0300     ................
1a001d2c:	0607 0009 0503 0706 0504 060f 0004 0303     ................
1a001d3c:	0404 0200 0404 0005 0502 0604 0200 0406     ................
1a001d4c:	0408 0c05 0a04 0504 010e 0003 0a00 1401     ................
1a001d5c:	0000 010f 0012 0d00 1101 0000 010c 0010     ................
1a001d6c:	0300 0707 0300 000f 0001 0100 0000 0000     ................
1a001d7c:	0600 000a 0603 0806 0504 0610 0005 0403     ................
1a001d8c:	0106 0300 0400 0409 0d05 0401 0000 010b     ................
1a001d9c:	000f 0200 0001 0000 0104 0001 0800 0201     ................
1a001dac:	0000 0109 0006 0901 0002 0504 0200 0401     ................
1a001dbc:	0105 0202 0504 0202 000a 0e00 0b02 0100     ................
1a001dcc:	020b 000c 0c01 ffff                         ........

1a001dd4 <lpcUarts>:
1a001dd4:	1000 4008 0406 0602 0205 0018 1000 4008     ...@...........@
1a001de4:	0509 0907 0706 0018 2000 4008 0000 0000     ......... .@....
1a001df4:	0000 0019 1000 400c 0107 0706 0602 001a     .......@........
1a001e04:	1000 400c 0f01 0101 0110 001a 2000 400c     ...@......... .@
1a001e14:	0302 0202 0204 001b 6f4c 6572 206d 7069     ........Lorem ip
1a001e24:	7573 206d 6f64 6f6c 2072 6973 2074 6d61     sum dolor sit am
1a001e34:	7465 202c 6f63 736e 6365 6574 7574 2072     et, consectetur 
1a001e44:	6461 7069 7369 6963 676e 6520 696c 2c74     adipiscing elit,
1a001e54:	7320 6465 6420 206f 6965 7375 6f6d 2064      sed do eiusmod 
1a001e64:	6574 706d 726f 6920 636e 6469 6469 6e75     tempor incididun
1a001e74:	2074 7475 6c20 6261 726f 2065 7465 6420     t ut labore et d
1a001e84:	6c6f 726f 2065 616d 6e67 2061 6c61 7169     olore magna aliq
1a001e94:	6175 202e 7455 6520 696e 206d 6461 6d20     ua. Ut enim ad m
1a001ea4:	6e69 6d69 7620 6e65 6169 2c6d 7120 6975     inim veniam, qui
1a001eb4:	2073 6f6e 7473 7572 2064 7865 7265 6963     s nostrud exerci
1a001ec4:	6174 6974 6e6f 7520 6c6c 6d61 6f63 6c20     tation ullamco l
1a001ed4:	6261 726f 7369 6e20 7369 2069 7475 6120     aboris nisi ut a
1a001ee4:	696c 7571 7069 6520 2078 6165 6320 6d6f     liquip ex ea com
1a001ef4:	6f6d 6f64 6320 6e6f 6573 7571 7461 202e     modo consequat. 
1a001f04:	7544 7369 6120 7475 2065 7269 7275 2065     Duis aute irure 
1a001f14:	6f64 6f6c 2072 6e69 7220 7065 6572 6568     dolor in reprehe
1a001f24:	646e 7265 7469 6920 206e 6f76 756c 7470     nderit in volupt
1a001f34:	7461 2065 6576 696c 2074 7365 6573 6320     ate velit esse c
1a001f44:	6c69 756c 206d 6f64 6f6c 6572 6520 2075     illum dolore eu 
1a001f54:	7566 6967 7461 6e20 6c75 616c 7020 7261     fugiat nulla par
1a001f64:	6169 7574 2e72 4520 6378 7065 6574 7275     iatur. Excepteur
1a001f74:	7320 6e69 2074 636f 6163 6365 7461 6320      sint occaecat c
1a001f84:	7075 6469 7461 7461 6e20 6e6f 7020 6f72     upidatat non pro
1a001f94:	6469 6e65 2c74 7320 6e75 2074 6e69 6320     ident, sunt in c
1a001fa4:	6c75 6170 7120 6975 6f20 6666 6369 6169     ulpa qui officia
1a001fb4:	6420 7365 7265 6e75 2074 6f6d 6c6c 7469      deserunt mollit
1a001fc4:	6120 696e 206d 6469 6520 7473 6c20 6261      anim id est lab
1a001fd4:	726f 6d75 002e 0000 6553 2064 7475 7020     orum....Sed ut p
1a001fe4:	7265 7073 6369 6169 6974 2c73 7520 646e     erspiciatis, und
1a001ff4:	2065 6d6f 696e 2073 7369 6574 6e20 7461     e omnis iste nat
1a002004:	7375 6520 7272 726f 7320 7469 7620 6c6f     us error sit vol
1a002014:	7075 6174 6574 206d 6361 7563 6173 746e     uptatem accusant
1a002024:	7569 206d 6f64 6f6c 6572 716d 6575 6c20     ium doloremque l
1a002034:	7561 6164 746e 7569 2c6d 7420 746f 6d61     audantium, totam
1a002044:	7220 6d65 6120 6570 6972 6d61 6520 7161      rem aperiam eaq
1a002054:	6575 6920 7370 2c61 7120 6175 2065 6261     ue ipsa, quae ab
1a002064:	6920 6c6c 206f 6e69 6576 746e 726f 2065      illo inventore 
1a002074:	6576 6972 6174 6974 2073 7465 7120 6175     veritatis et qua
1a002084:	6973 6120 6372 6968 6574 7463 206f 6562     si architecto be
1a002094:	7461 6561 7620 7469 6561 6420 6369 6174     atae vitae dicta
1a0020a4:	7320 6e75 2c74 6520 7078 696c 6163 6f62      sunt, explicabo
1a0020b4:	202e 654e 6f6d 6520 696e 206d 7069 6173     . Nemo enim ipsa
1a0020c4:	206d 6f76 756c 7470 7461 6d65 202c 7571     m voluptatem, qu
1a0020d4:	6169 7620 6c6f 7075 6174 2073 6973 2c74     ia voluptas sit,
1a0020e4:	6120 7073 7265 616e 7574 2072 7561 2074      aspernatur aut 
1a0020f4:	646f 7469 6120 7475 6620 6775 7469 202c     odit aut fugit, 
1a002104:	6573 2064 7571 6169 6320 6e6f 6573 7571     sed quia consequ
1a002114:	6e75 7574 2072 616d 6e67 2069 6f64 6f6c     untur magni dolo
1a002124:	6572 2073 6f65 2c73 7120 6975 7220 7461     res eos, qui rat
1a002134:	6f69 656e 7620 6c6f 7075 6174 6574 206d     ione voluptatem 
1a002144:	6573 7571 2069 656e 6373 7569 746e 202c     sequi nesciunt, 
1a002154:	656e 7571 2065 6f70 7272 206f 7571 7369     neque porro quis
1a002164:	7571 6d61 6520 7473 202c 7571 2069 6f64     quam est, qui do
1a002174:	6f6c 6572 206d 7069 7573 2c6d 7120 6975     lorem ipsum, qui
1a002184:	2061 6f64 6f6c 2072 6973 2074 6d61 7465     a dolor sit amet
1a002194:	6320 6e6f 6573 7463 7465 7275 6120 6964      consectetur adi
1a0021a4:	6970 6373 5b69 676e 765d 6c65 7469 202c     pisci[ng]velit, 
1a0021b4:	6573 2064 7571 6169 6e20 6e6f 6e20 6d75     sed quia non num
1a0021c4:	7571 6d61 5b20 6f64 205d 6965 7375 6d20     quam [do] eius m
1a0021d4:	646f 2069 6574 706d 726f 2061 6e69 6963     odi tempora inci
1a0021e4:	645b 5d69 7564 746e 202c 7475 6c20 6261     [di]dunt, ut lab
1a0021f4:	726f 2065 7465 6420 6c6f 726f 2065 616d     ore et dolore ma
1a002204:	6e67 6d61 6120 696c 7571 6d61 7120 6175     gnam aliquam qua
1a002214:	7265 7461 7620 6c6f 7075 6174 6574 2e6d     erat voluptatem.
1a002224:	5520 2074 6e65 6d69 6120 2064 696d 696e      Ut enim ad mini
1a002234:	616d 7620 6e65 6169 2c6d 7120 6975 2073     ma veniam, quis 
1a002244:	6f6e 7473 7572 5b6d 5d64 6520 6578 6372     nostrum[d] exerc
1a002254:	7469 7461 6f69 656e 206d 6c75 616c 206d     itationem ullam 
1a002264:	6f63 7072 726f 7369 7320 7375 6963 6970     corporis suscipi
1a002274:	2074 616c 6f62 6972 736f 6d61 202c 696e     t laboriosam, ni
1a002284:	6973 7520 2074 6c61 7169 6975 2064 7865     si ut aliquid ex
1a002294:	6520 2061 6f63 6d6d 646f 2069 6f63 736e      ea commodi cons
1a0022a4:	7165 6175 7574 3f72 5120 6975 2073 7561     equatur? Quis au
1a0022b4:	6574 206d 6576 206c 7565 206d 7569 6572     tem vel eum iure
1a0022c4:	7220 7065 6572 6568 646e 7265 7469 202c      reprehenderit, 
1a0022d4:	7571 2069 6e69 6520 2061 6f76 756c 7470     qui in ea volupt
1a0022e4:	7461 2065 6576 696c 2074 7365 6573 202c     ate velit esse, 
1a0022f4:	7571 6d61 6e20 6869 6c69 6d20 6c6f 7365     quam nihil moles
1a002304:	6974 6561 6320 6e6f 6573 7571 7461 7275     tiae consequatur
1a002314:	202c 6576 206c 6c69 756c 2c6d 7120 6975     , vel illum, qui
1a002324:	6420 6c6f 726f 6d65 6520 6d75 6620 6775      dolorem eum fug
1a002334:	6169 2c74 7120 6f75 7620 6c6f 7075 6174     iat, quo volupta
1a002344:	2073 756e 6c6c 2061 6170 6972 7461 7275     s nulla pariatur
1a002354:	203f 335b 5d33 4120 2074 6576 6f72 6520     ? [33] At vero e
1a002364:	736f 6520 2074 6361 7563 6173 756d 2073     os et accusamus 
1a002374:	7465 6920 7375 6f74 6f20 6964 206f 6964     et iusto odio di
1a002384:	6e67 7369 6973 6f6d 2073 7564 6963 756d     gnissimos ducimu
1a002394:	2c73 7120 6975 6220 616c 646e 7469 6969     s, qui blanditii
1a0023a4:	2073 7270 6561 6573 746e 7569 206d 6f76     s praesentium vo
1a0023b4:	756c 7470 7461 6d75 6420 6c65 6e65 7469     luptatum delenit
1a0023c4:	2069 7461 7571 2065 6f63 7272 7075 6974     i atque corrupti
1a0023d4:	202c 7571 736f 6420 6c6f 726f 7365 6520     , quos dolores e
1a0023e4:	2074 7571 7361 6d20 6c6f 7365 6974 7361     t quas molestias
1a0023f4:	6520 6378 7065 7574 6972 7320 6e69 2c74      excepturi sint,
1a002404:	6f20 6362 6561 6163 6974 6320 7075 6469      obcaecati cupid
1a002414:	7469 7461 2065 6f6e 206e 7270 766f 6469     itate non provid
1a002424:	6e65 2c74 7320 6d69 6c69 7169 6575 7320     ent, similique s
1a002434:	6e75 2074 6e69 6320 6c75 6170 202c 7571     unt in culpa, qu
1a002444:	2069 666f 6966 6963 2061 6564 6573 7572     i officia deseru
1a002454:	746e 6d20 6c6f 696c 6974 2061 6e61 6d69     nt mollitia anim
1a002464:	2c69 6920 2064 7365 2074 616c 6f62 7572     i, id est laboru
1a002474:	206d 7465 6420 6c6f 726f 6d75 6620 6775     m et dolorum fug
1a002484:	2e61 4520 2074 6168 7572 206d 7571 6469     a. Et harum quid
1a002494:	6d65 7220 7265 6d75 6620 6361 6c69 7369     em rerum facilis
1a0024a4:	6520 7473 6520 2074 7865 6570 6964 6174      est et expedita
1a0024b4:	6420 7369 6974 636e 6974 2e6f 4e20 6d61      distinctio. Nam
1a0024c4:	6c20 6269 7265 206f 6574 706d 726f 2c65      libero tempore,
1a0024d4:	6320 6d75 7320 6c6f 7475 2061 6f6e 6962      cum soluta nobi
1a0024e4:	2073 7365 2074 6c65 6769 6e65 6964 6f20     s est eligendi o
1a0024f4:	7470 6f69 202c 7563 716d 6575 6e20 6869     ptio, cumque nih
1a002504:	6c69 6920 706d 6465 7469 202c 7571 206f     il impedit, quo 
1a002514:	696d 756e 2073 6469 202c 7571 646f 6d20     minus id, quod m
1a002524:	7861 6d69 2065 6c70 6361 6165 2c74 6620     axime placeat, f
1a002534:	6361 7265 2065 6f70 7373 6d69 7375 202c     acere possimus, 
1a002544:	6d6f 696e 2073 6f76 756c 7470 7361 6120     omnis voluptas a
1a002554:	7373 6d75 6e65 6164 6520 7473 202c 6d6f     ssumenda est, om
1a002564:	696e 2073 6f64 6f6c 2072 6572 6570 6c6c     nis dolor repell
1a002574:	6e65 7564 2e73 5420 6d65 6f70 6972 7562     endus. Temporibu
1a002584:	2073 7561 6574 206d 7571 6269 7375 6164     s autem quibusda
1a002594:	206d 7465 6120 7475 6f20 6666 6369 6969     m et aut officii
1a0025a4:	2073 6564 6962 6974 2073 7561 2074 6572     s debitis aut re
1a0025b4:	7572 206d 656e 6563 7373 7469 7461 6269     rum necessitatib
1a0025c4:	7375 7320 6561 6570 6520 6576 696e 7465     us saepe eveniet
1a0025d4:	202c 7475 6520 2074 6f76 756c 7470 7461     , ut et voluptat
1a0025e4:	7365 7220 7065 6475 6169 646e 6561 7320     es repudiandae s
1a0025f4:	6e69 2074 7465 6d20 6c6f 7365 6974 6561     int et molestiae
1a002604:	6e20 6e6f 7220 6365 7375 6e61 6164 2e65      non recusandae.
1a002614:	4920 6174 7571 2065 6165 7572 206d 6572      Itaque earum re
1a002624:	7572 206d 6968 2063 6574 656e 7574 2072     rum hic tenetur 
1a002634:	2061 6173 6970 6e65 6574 6420 6c65 6365     a sapiente delec
1a002644:	7574 2c73 7520 2074 7561 2074 6572 6369     tus, ut aut reic
1a002654:	6569 646e 7369 7620 6c6f 7075 6174 6974     iendis voluptati
1a002664:	7562 2073 616d 6f69 6572 2073 6c61 6169     bus maiores alia
1a002674:	2073 6f63 736e 7165 6175 7574 2072 7561     s consequatur au
1a002684:	2074 6570 6672 7265 6e65 6964 2073 6f64     t perferendis do
1a002694:	6f6c 6972 7562 2073 7361 6570 6972 726f     loribus asperior
1a0026a4:	7365 7220 7065 6c65 616c e274 a680 0000     es repellat.....
1a0026b4:	0d3b 000a                                   ;...
